{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport Geocode from \"react-geocode\";\n\nconst GoogleMapSettings = ({\n  startPoint = \"\",\n  wayPoint = \"\",\n  endPoint = \"\"\n}) => {\n  _s();\n\n  console.log(\"셋팅 startPoint\", startPoint);\n  console.log(\"셋팅 wayPoint\", wayPoint);\n  console.log(\"셋팅 endPoint\", endPoint); // 리버스 Geocode (주소로 좌표 구하기)\n  // 좌표를 담을 배열(기본 빈 배열)\n\n  const [places, setPlaces] = useState([]); // 기본 설정(key, 언어, 장소)\n  // 마운트시에 한 번 실행\n\n  useEffect(() => {\n    Geocode.setApiKey(process.env.REACT_APP_MY_KEY);\n    Geocode.setLanguage(\"ko\");\n    Geocode.setRegion(\"ko\"); // 주소로 좌표 구하는 함수\n\n    const getLatLng = address => {\n      Geocode.fromAddress(address).then(response => {\n        const {\n          lat,\n          lng\n        } = response.results[0].geometry.location; // console.log({ lat, lng });\n\n        setPlaces(prevPlaces => {\n          // console.log(\"이전값\", prevPlaces);\n          return [...prevPlaces, {\n            lat: lat,\n            lng: lng\n          }];\n        }); // console.log(\"places 업데이트 됐나?\", places);\n      }, error => {\n        console.log(\"error\", error);\n      });\n    }; // console.log(\"주소 array: \", address);\n    // console.log(\n    //   `address1: ${address1} \\naddress2: ${address2} \\naddress3: ${address3} \\n`\n    // );\n\n\n    console.log(\"니가 안되고 있니?\");\n\n    if (startPoint !== \"\" && wayPoint !== \"\" && endPoint !== \"\") {\n      console.log(\"잡았다 요놈\");\n      getLatLng(startPoint);\n      getLatLng(wayPoint);\n      getLatLng(endPoint);\n    } // console.log(\"허허\", places);\n\n  }, []);\n  return places;\n};\n\n_s(GoogleMapSettings, \"Ez2sxHqHwXplpokbasymv65s8jQ=\");\n\n_c = GoogleMapSettings;\nexport default GoogleMapSettings;\n\nvar _c;\n\n$RefreshReg$(_c, \"GoogleMapSettings\");","map":{"version":3,"sources":["D:/__Bitcamp/__crafts/02_final/project/1022 ~/PlanD/front-end/src/components/body/map/GoogleMapSettings.jsx"],"names":["useState","useEffect","Geocode","GoogleMapSettings","startPoint","wayPoint","endPoint","console","log","places","setPlaces","setApiKey","process","env","REACT_APP_MY_KEY","setLanguage","setRegion","getLatLng","address","fromAddress","then","response","lat","lng","results","geometry","location","prevPlaces","error"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,eAApB;;AAEA,MAAMC,iBAAiB,GAAG,CAAC;AACzBC,EAAAA,UAAU,GAAG,EADY;AAEzBC,EAAAA,QAAQ,GAAG,EAFc;AAGzBC,EAAAA,QAAQ,GAAG;AAHc,CAAD,KAIpB;AAAA;;AACJC,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BJ,UAA7B;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,QAA3B;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,QAA3B,EAHI,CAIJ;AACA;;AACA,QAAM,CAACG,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC,CANI,CAOJ;AAEA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,OAAO,CAACS,SAAR,CAAkBC,OAAO,CAACC,GAAR,CAAYC,gBAA9B;AACAZ,IAAAA,OAAO,CAACa,WAAR,CAAoB,IAApB;AACAb,IAAAA,OAAO,CAACc,SAAR,CAAkB,IAAlB,EAHc,CAId;;AACA,UAAMC,SAAS,GAAIC,OAAD,IAAa;AAC7BhB,MAAAA,OAAO,CAACiB,WAAR,CAAoBD,OAApB,EAA6BE,IAA7B,CACGC,QAAD,IAAc;AACZ,cAAM;AAAEC,UAAAA,GAAF;AAAOC,UAAAA;AAAP,YAAeF,QAAQ,CAACG,OAAT,CAAiB,CAAjB,EAAoBC,QAApB,CAA6BC,QAAlD,CADY,CAEZ;;AACAhB,QAAAA,SAAS,CAAEiB,UAAD,IAAgB;AACxB;AACA,iBAAO,CAAC,GAAGA,UAAJ,EAAgB;AAAEL,YAAAA,GAAG,EAAEA,GAAP;AAAYC,YAAAA,GAAG,EAAEA;AAAjB,WAAhB,CAAP;AACD,SAHQ,CAAT,CAHY,CAOZ;AACD,OATH,EAUGK,KAAD,IAAW;AACTrB,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBoB,KAArB;AACD,OAZH;AAcD,KAfD,CALc,CAqBd;AACA;AACA;AACA;;;AACArB,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;;AACA,QAAIJ,UAAU,KAAK,EAAf,IAAqBC,QAAQ,KAAK,EAAlC,IAAwCC,QAAQ,KAAK,EAAzD,EAA6D;AAC3DC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAS,MAAAA,SAAS,CAACb,UAAD,CAAT;AACAa,MAAAA,SAAS,CAACZ,QAAD,CAAT;AACAY,MAAAA,SAAS,CAACX,QAAD,CAAT;AACD,KA/Ba,CAgCd;;AACD,GAjCQ,EAiCN,EAjCM,CAAT;AAmCA,SAAOG,MAAP;AACD,CAlDD;;GAAMN,iB;;KAAAA,iB;AAoDN,eAAeA,iBAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport Geocode from \"react-geocode\";\r\n\r\nconst GoogleMapSettings = ({\r\n  startPoint = \"\",\r\n  wayPoint = \"\",\r\n  endPoint = \"\",\r\n}) => {\r\n  console.log(\"셋팅 startPoint\", startPoint);\r\n  console.log(\"셋팅 wayPoint\", wayPoint);\r\n  console.log(\"셋팅 endPoint\", endPoint);\r\n  // 리버스 Geocode (주소로 좌표 구하기)\r\n  // 좌표를 담을 배열(기본 빈 배열)\r\n  const [places, setPlaces] = useState([]);\r\n  // 기본 설정(key, 언어, 장소)\r\n\r\n  // 마운트시에 한 번 실행\r\n  useEffect(() => {\r\n    Geocode.setApiKey(process.env.REACT_APP_MY_KEY);\r\n    Geocode.setLanguage(\"ko\");\r\n    Geocode.setRegion(\"ko\");\r\n    // 주소로 좌표 구하는 함수\r\n    const getLatLng = (address) => {\r\n      Geocode.fromAddress(address).then(\r\n        (response) => {\r\n          const { lat, lng } = response.results[0].geometry.location;\r\n          // console.log({ lat, lng });\r\n          setPlaces((prevPlaces) => {\r\n            // console.log(\"이전값\", prevPlaces);\r\n            return [...prevPlaces, { lat: lat, lng: lng }];\r\n          });\r\n          // console.log(\"places 업데이트 됐나?\", places);\r\n        },\r\n        (error) => {\r\n          console.log(\"error\", error);\r\n        }\r\n      );\r\n    };\r\n    // console.log(\"주소 array: \", address);\r\n    // console.log(\r\n    //   `address1: ${address1} \\naddress2: ${address2} \\naddress3: ${address3} \\n`\r\n    // );\r\n    console.log(\"니가 안되고 있니?\");\r\n    if (startPoint !== \"\" && wayPoint !== \"\" && endPoint !== \"\") {\r\n      console.log(\"잡았다 요놈\");\r\n      getLatLng(startPoint);\r\n      getLatLng(wayPoint);\r\n      getLatLng(endPoint);\r\n    }\r\n    // console.log(\"허허\", places);\r\n  }, []);\r\n\r\n  return places;\r\n};\r\n\r\nexport default GoogleMapSettings;\r\n"]},"metadata":{},"sourceType":"module"}