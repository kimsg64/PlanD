{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Geocode from \"react-geocode\";\n\nconst GoogleMapSettings = ({\n  startPoint = \"서울특별시 마포구 서교동 332 33 1층\",\n  wayPoint = \"서울특별시 마포구 서교동 홍익로6길 15\",\n  endPoint = \"서울특별시 마포구 서교동 와우산로21길 31-10\"\n}) => {\n  _s();\n\n  // console.log(\"startPoint\", startPoint);\n  // console.log(\"wayPoint\", wayPoint);\n  // console.log(\"endPoint\", endPoint);\n  // 리버스 Geocode (주소로 좌표 구하기)\n  // 좌표를 담을 배열(기본 빈 배열)\n  const [places, setPlaces] = useState([]); // 기본 설정(key, 언어, 장소)\n  // 마운트시에 한 번 실행\n\n  useEffect(() => {\n    Geocode.setApiKey(process.env.REACT_APP_MY_KEY);\n    Geocode.setLanguage(\"ko\");\n    Geocode.setRegion(\"ko\"); // 주소로 좌표 구하는 함수\n\n    const getLatLng = address => {\n      Geocode.fromAddress(address).then(response => {\n        const {\n          lat,\n          lng\n        } = response.results[0].geometry.location;\n        console.log({\n          lat,\n          lng\n        });\n        setPlaces(prevPlaces => {\n          // console.log(\"이전값\", prevPlaces);\n          return [...prevPlaces, {\n            lat: lat,\n            lng: lng\n          }];\n        });\n        console.log(\"places 업데이트 됐나?\", places);\n      }, error => {\n        console.log(\"error\", error);\n      });\n    }; // console.log(\"주소 array: \", address);\n    // console.log(\n    //   `address1: ${address1} \\naddress2: ${address2} \\naddress3: ${address3} \\n`\n    // );\n\n\n    getLatLng(startPoint);\n    getLatLng(wayPoint);\n    getLatLng(endPoint);\n    console.log(\"허허\", places);\n  }, []);\n  return places.length === 3 ? places : null;\n};\n\n_s(GoogleMapSettings, \"Ez2sxHqHwXplpokbasymv65s8jQ=\");\n\n_c = GoogleMapSettings;\nexport default GoogleMapSettings;\n\nvar _c;\n\n$RefreshReg$(_c, \"GoogleMapSettings\");","map":{"version":3,"sources":["D:/__Bitcamp/__crafts/02_final/project/1009~/PlanD/front-end/src/components/body/map/GoogleMapSettings.jsx"],"names":["React","useState","useEffect","Geocode","GoogleMapSettings","startPoint","wayPoint","endPoint","places","setPlaces","setApiKey","process","env","REACT_APP_MY_KEY","setLanguage","setRegion","getLatLng","address","fromAddress","then","response","lat","lng","results","geometry","location","console","log","prevPlaces","error","length"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,eAApB;;AAEA,MAAMC,iBAAiB,GAAG,CAAC;AACzBC,EAAAA,UAAU,GAAG,yBADY;AAEzBC,EAAAA,QAAQ,GAAG,wBAFc;AAGzBC,EAAAA,QAAQ,GAAG;AAHc,CAAD,KAIpB;AAAA;;AACJ;AACA;AACA;AACA;AACA;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC,CANI,CAOJ;AAEA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,OAAO,CAACO,SAAR,CAAkBC,OAAO,CAACC,GAAR,CAAYC,gBAA9B;AACAV,IAAAA,OAAO,CAACW,WAAR,CAAoB,IAApB;AACAX,IAAAA,OAAO,CAACY,SAAR,CAAkB,IAAlB,EAHc,CAId;;AACA,UAAMC,SAAS,GAAIC,OAAD,IAAa;AAC7Bd,MAAAA,OAAO,CAACe,WAAR,CAAoBD,OAApB,EAA6BE,IAA7B,CACGC,QAAD,IAAc;AACZ,cAAM;AAAEC,UAAAA,GAAF;AAAOC,UAAAA;AAAP,YAAeF,QAAQ,CAACG,OAAT,CAAiB,CAAjB,EAAoBC,QAApB,CAA6BC,QAAlD;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY;AAAEN,UAAAA,GAAF;AAAOC,UAAAA;AAAP,SAAZ;AACAb,QAAAA,SAAS,CAAEmB,UAAD,IAAgB;AACxB;AACA,iBAAO,CAAC,GAAGA,UAAJ,EAAgB;AAAEP,YAAAA,GAAG,EAAEA,GAAP;AAAYC,YAAAA,GAAG,EAAEA;AAAjB,WAAhB,CAAP;AACD,SAHQ,CAAT;AAIAI,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BnB,MAA/B;AACD,OATH,EAUGqB,KAAD,IAAW;AACTH,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBE,KAArB;AACD,OAZH;AAcD,KAfD,CALc,CAqBd;AACA;AACA;AACA;;;AACAb,IAAAA,SAAS,CAACX,UAAD,CAAT;AACAW,IAAAA,SAAS,CAACV,QAAD,CAAT;AACAU,IAAAA,SAAS,CAACT,QAAD,CAAT;AACAmB,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBnB,MAAlB;AACD,GA7BQ,EA6BN,EA7BM,CAAT;AA+BA,SAAOA,MAAM,CAACsB,MAAP,KAAkB,CAAlB,GAAsBtB,MAAtB,GAA+B,IAAtC;AACD,CA9CD;;GAAMJ,iB;;KAAAA,iB;AAgDN,eAAeA,iBAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Geocode from \"react-geocode\";\r\n\r\nconst GoogleMapSettings = ({\r\n  startPoint = \"서울특별시 마포구 서교동 332 33 1층\",\r\n  wayPoint = \"서울특별시 마포구 서교동 홍익로6길 15\",\r\n  endPoint = \"서울특별시 마포구 서교동 와우산로21길 31-10\",\r\n}) => {\r\n  // console.log(\"startPoint\", startPoint);\r\n  // console.log(\"wayPoint\", wayPoint);\r\n  // console.log(\"endPoint\", endPoint);\r\n  // 리버스 Geocode (주소로 좌표 구하기)\r\n  // 좌표를 담을 배열(기본 빈 배열)\r\n  const [places, setPlaces] = useState([]);\r\n  // 기본 설정(key, 언어, 장소)\r\n\r\n  // 마운트시에 한 번 실행\r\n  useEffect(() => {\r\n    Geocode.setApiKey(process.env.REACT_APP_MY_KEY);\r\n    Geocode.setLanguage(\"ko\");\r\n    Geocode.setRegion(\"ko\");\r\n    // 주소로 좌표 구하는 함수\r\n    const getLatLng = (address) => {\r\n      Geocode.fromAddress(address).then(\r\n        (response) => {\r\n          const { lat, lng } = response.results[0].geometry.location;\r\n          console.log({ lat, lng });\r\n          setPlaces((prevPlaces) => {\r\n            // console.log(\"이전값\", prevPlaces);\r\n            return [...prevPlaces, { lat: lat, lng: lng }];\r\n          });\r\n          console.log(\"places 업데이트 됐나?\", places);\r\n        },\r\n        (error) => {\r\n          console.log(\"error\", error);\r\n        }\r\n      );\r\n    };\r\n    // console.log(\"주소 array: \", address);\r\n    // console.log(\r\n    //   `address1: ${address1} \\naddress2: ${address2} \\naddress3: ${address3} \\n`\r\n    // );\r\n    getLatLng(startPoint);\r\n    getLatLng(wayPoint);\r\n    getLatLng(endPoint);\r\n    console.log(\"허허\", places);\r\n  }, []);\r\n\r\n  return places.length === 3 ? places : null;\r\n};\r\n\r\nexport default GoogleMapSettings;\r\n"]},"metadata":{},"sourceType":"module"}