{"ast":null,"code":"var _jsxFileName = \"D:\\\\__Bitcamp\\\\__crafts\\\\02_final\\\\project\\\\1009~\\\\PlanD\\\\front-end\\\\src\\\\components\\\\body\\\\map\\\\CustomTMap.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TMapContainer = styled.div`\n  width: 800px;\n  height: 400px;\n`;\n_c = TMapContainer;\n\nconst CustomTMap = () => {\n  _s();\n\n  useEffect(() => {\n    // 지도 생성\n    let script = document.createElement(\"script\");\n    script.innerHTML = `\n    function initTmap() {\n        let map = new Tmapv2.Map(\"TMapApp\", {\n            center: new Tmapv2.LatLng(37.566481622437934,126.98502302169841),\n            width: \"800px\",\n            height: \"400px\",\n            zoom:15\n        });\n\n        // 시작 심볼\n        let marker_s = new Tmapv2.Marker({\n          position: new Tmapv2.LatLng(37.5668986, 126.97871544),\n          icon: \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_s.png\",\n          iconSize: new Tmapv2.Size(24, 38),\n          map: map,\n        });\n\n        // 도착\n        let marker_e = new Tmapv2.Marker({\n          position: new Tmapv2.LatLng(37.57081522, 127.00160213),\n          icon: \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_e.png\",\n          iconSize: new Tmapv2.Size(24, 38),\n          map: map,\n        });\n\n        \n        // 경로 탐색 API 호출\n        $.ajax({\n          method: \"POST\",\n          url: \"https://apis.openapi.sk.com/tmap/routes/pedestrian?version=1&format=json&callback=result\",\n          async: false,\n          data: {\n            appKey: \"발급AppKey\",\n            startX: \"126.97871544\",\n            startY: \"37.56689860\",\n            endX: \"127.00160213\",\n            endY: \"37.57081522\",\n            reqCoordType: \"WGS84GEO\",\n            resCoordType: \"EPSG3857\",\n            startName: \"출발지\",\n            endName: \"도착지\",\n          },\n          success: function (response) {\n            var resultData = response.features;\n    \n            //결과 출력\n            var tDistance =\n              \"총 거리 : \" +\n              (resultData[0].properties.totalDistance / 1000).toFixed(1) +\n              \"km,\";\n            var tTime =\n              \" 총 시간 : \" +\n              (resultData[0].properties.totalTime / 60).toFixed(0) +\n              \"분\";\n    \n            $(\"#result\").text(tDistance + tTime);\n    \n            //기존 그려진 라인 & 마커가 있다면 초기화\n            if (resultdrawArr.length > 0) {\n              for (var i in resultdrawArr) {\n                resultdrawArr[i].setMap(null);\n              }\n              resultdrawArr = [];\n            }\n    \n            drawInfoArr = [];\n    \n            for (var i in resultData) {\n              //for문 [S]\n              var geometry = resultData[i].geometry;\n              var properties = resultData[i].properties;\n              var polyline_;\n    \n              if (geometry.type == \"LineString\") {\n                for (var j in geometry.coordinates) {\n                  // 경로들의 결과값(구간)들을 포인트 객체로 변환\n                  var latlng = new Tmapv2.Point(\n                    geometry.coordinates[j][0],\n                    geometry.coordinates[j][1]\n                  );\n                  // 포인트 객체를 받아 좌표값으로 변환\n                  var convertPoint =\n                    new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(latlng);\n                  // 포인트객체의 정보로 좌표값 변환 객체로 저장\n                  var convertChange = new Tmapv2.LatLng(\n                    convertPoint._lat,\n                    convertPoint._lng\n                  );\n                  // 배열에 담기\n                  drawInfoArr.push(convertChange);\n                }\n              } else {\n                var markerImg = \"\";\n                var pType = \"\";\n                var size;\n    \n                if (properties.pointType == \"S\") {\n                  //출발지 마커\n                  markerImg =\n                    \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_s.png\";\n                  pType = \"S\";\n                  size = new Tmapv2.Size(24, 38);\n                } else if (properties.pointType == \"E\") {\n                  //도착지 마커\n                  markerImg =\n                    \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_e.png\";\n                  pType = \"E\";\n                  size = new Tmapv2.Size(24, 38);\n                } else {\n                  //각 포인트 마커\n                  markerImg = \"http://topopen.tmap.co.kr/imgs/point.png\";\n                  pType = \"P\";\n                  size = new Tmapv2.Size(8, 8);\n                }\n    \n                // 경로들의 결과값들을 포인트 객체로 변환\n                var latlon = new Tmapv2.Point(\n                  geometry.coordinates[0],\n                  geometry.coordinates[1]\n                );\n    \n                // 포인트 객체를 받아 좌표값으로 다시 변환\n                var convertPoint = new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(\n                  latlon\n                );\n    \n                var routeInfoObj = {\n                  markerImage: markerImg,\n                  lng: convertPoint._lng,\n                  lat: convertPoint._lat,\n                  pointType: pType,\n                };\n    \n                // Marker 추가\n                marker_p = new Tmapv2.Marker({\n                  position: new Tmapv2.LatLng(routeInfoObj.lat, routeInfoObj.lng),\n                  icon: routeInfoObj.markerImage,\n                  iconSize: size,\n                  map: map,\n                });\n              }\n            } //for문 [E]\n            drawLine(drawInfoArr);\n          },\n          error: function (request, status, error) {\n            console.log(\n              \"code:\" +\n                request.status +\n                \"\\n\" +\n                \"message:\" +\n                request.responseText +\n                \"\\n\" +\n                \"error:\" +\n                error\n            );\n          },\n        });\n    }\n    initTmap();\n    `;\n    script.type = \"text/javascript\";\n    script.async = \"async\";\n    document.head.appendChild(script);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(TMapContainer, {\n    id: \"TMapApp\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CustomTMap, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c2 = CustomTMap;\nexport default CustomTMap;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TMapContainer\");\n$RefreshReg$(_c2, \"CustomTMap\");","map":{"version":3,"sources":["D:/__Bitcamp/__crafts/02_final/project/1009~/PlanD/front-end/src/components/body/map/CustomTMap.jsx"],"names":["React","useEffect","styled","TMapContainer","div","CustomTMap","script","document","createElement","innerHTML","type","async","head","appendChild"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAEA,MAAMC,aAAa,GAAGD,MAAM,CAACE,GAAI;AACjC;AACA;AACA,CAHA;KAAMD,a;;AAKN,MAAME,UAAU,GAAG,MAAM;AAAA;;AACvBJ,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIK,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AACAF,IAAAA,MAAM,CAACG,SAAP,GAAoB;AACxgKAH,IAAAA,MAAM,CAACI,IAAP,GAAc,iBAAd;AACAJ,IAAAA,MAAM,CAACK,KAAP,GAAe,OAAf;AACAJ,IAAAA,QAAQ,CAACK,IAAT,CAAcC,WAAd,CAA0BP,MAA1B;AACD,GAtKQ,EAsKN,EAtKM,CAAT;AAwKA,sBAAO,QAAC,aAAD;AAAe,IAAA,EAAE,EAAC;AAAlB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA1KD;;GAAMD,U;;MAAAA,U;AA4KN,eAAeA,UAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TMapContainer = styled.div`\r\n  width: 800px;\r\n  height: 400px;\r\n`;\r\n\r\nconst CustomTMap = () => {\r\n  useEffect(() => {\r\n    // 지도 생성\r\n    let script = document.createElement(\"script\");\r\n    script.innerHTML = `\r\n    function initTmap() {\r\n        let map = new Tmapv2.Map(\"TMapApp\", {\r\n            center: new Tmapv2.LatLng(37.566481622437934,126.98502302169841),\r\n            width: \"800px\",\r\n            height: \"400px\",\r\n            zoom:15\r\n        });\r\n\r\n        // 시작 심볼\r\n        let marker_s = new Tmapv2.Marker({\r\n          position: new Tmapv2.LatLng(37.5668986, 126.97871544),\r\n          icon: \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_s.png\",\r\n          iconSize: new Tmapv2.Size(24, 38),\r\n          map: map,\r\n        });\r\n\r\n        // 도착\r\n        let marker_e = new Tmapv2.Marker({\r\n          position: new Tmapv2.LatLng(37.57081522, 127.00160213),\r\n          icon: \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_e.png\",\r\n          iconSize: new Tmapv2.Size(24, 38),\r\n          map: map,\r\n        });\r\n\r\n        \r\n        // 경로 탐색 API 호출\r\n        $.ajax({\r\n          method: \"POST\",\r\n          url: \"https://apis.openapi.sk.com/tmap/routes/pedestrian?version=1&format=json&callback=result\",\r\n          async: false,\r\n          data: {\r\n            appKey: \"발급AppKey\",\r\n            startX: \"126.97871544\",\r\n            startY: \"37.56689860\",\r\n            endX: \"127.00160213\",\r\n            endY: \"37.57081522\",\r\n            reqCoordType: \"WGS84GEO\",\r\n            resCoordType: \"EPSG3857\",\r\n            startName: \"출발지\",\r\n            endName: \"도착지\",\r\n          },\r\n          success: function (response) {\r\n            var resultData = response.features;\r\n    \r\n            //결과 출력\r\n            var tDistance =\r\n              \"총 거리 : \" +\r\n              (resultData[0].properties.totalDistance / 1000).toFixed(1) +\r\n              \"km,\";\r\n            var tTime =\r\n              \" 총 시간 : \" +\r\n              (resultData[0].properties.totalTime / 60).toFixed(0) +\r\n              \"분\";\r\n    \r\n            $(\"#result\").text(tDistance + tTime);\r\n    \r\n            //기존 그려진 라인 & 마커가 있다면 초기화\r\n            if (resultdrawArr.length > 0) {\r\n              for (var i in resultdrawArr) {\r\n                resultdrawArr[i].setMap(null);\r\n              }\r\n              resultdrawArr = [];\r\n            }\r\n    \r\n            drawInfoArr = [];\r\n    \r\n            for (var i in resultData) {\r\n              //for문 [S]\r\n              var geometry = resultData[i].geometry;\r\n              var properties = resultData[i].properties;\r\n              var polyline_;\r\n    \r\n              if (geometry.type == \"LineString\") {\r\n                for (var j in geometry.coordinates) {\r\n                  // 경로들의 결과값(구간)들을 포인트 객체로 변환\r\n                  var latlng = new Tmapv2.Point(\r\n                    geometry.coordinates[j][0],\r\n                    geometry.coordinates[j][1]\r\n                  );\r\n                  // 포인트 객체를 받아 좌표값으로 변환\r\n                  var convertPoint =\r\n                    new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(latlng);\r\n                  // 포인트객체의 정보로 좌표값 변환 객체로 저장\r\n                  var convertChange = new Tmapv2.LatLng(\r\n                    convertPoint._lat,\r\n                    convertPoint._lng\r\n                  );\r\n                  // 배열에 담기\r\n                  drawInfoArr.push(convertChange);\r\n                }\r\n              } else {\r\n                var markerImg = \"\";\r\n                var pType = \"\";\r\n                var size;\r\n    \r\n                if (properties.pointType == \"S\") {\r\n                  //출발지 마커\r\n                  markerImg =\r\n                    \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_s.png\";\r\n                  pType = \"S\";\r\n                  size = new Tmapv2.Size(24, 38);\r\n                } else if (properties.pointType == \"E\") {\r\n                  //도착지 마커\r\n                  markerImg =\r\n                    \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_e.png\";\r\n                  pType = \"E\";\r\n                  size = new Tmapv2.Size(24, 38);\r\n                } else {\r\n                  //각 포인트 마커\r\n                  markerImg = \"http://topopen.tmap.co.kr/imgs/point.png\";\r\n                  pType = \"P\";\r\n                  size = new Tmapv2.Size(8, 8);\r\n                }\r\n    \r\n                // 경로들의 결과값들을 포인트 객체로 변환\r\n                var latlon = new Tmapv2.Point(\r\n                  geometry.coordinates[0],\r\n                  geometry.coordinates[1]\r\n                );\r\n    \r\n                // 포인트 객체를 받아 좌표값으로 다시 변환\r\n                var convertPoint = new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(\r\n                  latlon\r\n                );\r\n    \r\n                var routeInfoObj = {\r\n                  markerImage: markerImg,\r\n                  lng: convertPoint._lng,\r\n                  lat: convertPoint._lat,\r\n                  pointType: pType,\r\n                };\r\n    \r\n                // Marker 추가\r\n                marker_p = new Tmapv2.Marker({\r\n                  position: new Tmapv2.LatLng(routeInfoObj.lat, routeInfoObj.lng),\r\n                  icon: routeInfoObj.markerImage,\r\n                  iconSize: size,\r\n                  map: map,\r\n                });\r\n              }\r\n            } //for문 [E]\r\n            drawLine(drawInfoArr);\r\n          },\r\n          error: function (request, status, error) {\r\n            console.log(\r\n              \"code:\" +\r\n                request.status +\r\n                \"\\n\" +\r\n                \"message:\" +\r\n                request.responseText +\r\n                \"\\n\" +\r\n                \"error:\" +\r\n                error\r\n            );\r\n          },\r\n        });\r\n    }\r\n    initTmap();\r\n    `;\r\n    script.type = \"text/javascript\";\r\n    script.async = \"async\";\r\n    document.head.appendChild(script);\r\n  }, []);\r\n\r\n  return <TMapContainer id=\"TMapApp\"></TMapContainer>;\r\n};\r\n\r\nexport default CustomTMap;\r\n"]},"metadata":{},"sourceType":"module"}