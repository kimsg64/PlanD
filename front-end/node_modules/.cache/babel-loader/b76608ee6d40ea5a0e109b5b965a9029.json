{"ast":null,"code":"var _jsxFileName = \"D:\\\\__Bitcamp\\\\__crafts\\\\02_final\\\\project\\\\1009~\\\\PlanD\\\\front-end\\\\src\\\\components\\\\body\\\\map\\\\CustomTMap.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TMapContainer = styled.div`\n  width: 800px;\n  height: 400px;\n`;\n_c = TMapContainer;\nconst {\n  Tmapv2\n} = window;\n\nconst CustomTMap = ({\n  startPoint = {},\n  wayPoint = {},\n  endPoint = {}\n}) => {\n  _s();\n\n  const [Tmap, setTMap] = useState();\n  const [marker_s, setMarker_s] = useState();\n  const [marker_e, setMarker_e] = useState();\n  const [marker_p, setMarker_p] = useState();\n  const [resultData, setResultData] = useState([]);\n  const startX = startPoint === null || startPoint === void 0 ? void 0 : startPoint.lng;\n  const startY = startPoint === null || startPoint === void 0 ? void 0 : startPoint.lat;\n  const wayX = wayPoint === null || wayPoint === void 0 ? void 0 : wayPoint.lng;\n  const wayY = wayPoint === null || wayPoint === void 0 ? void 0 : wayPoint.lat;\n  const endX = endPoint === null || endPoint === void 0 ? void 0 : endPoint.lng;\n  const endY = endPoint === null || endPoint === void 0 ? void 0 : endPoint.lat; // console.log(\n  //   \"이곳은 마커가 찍혀야 하는 곳입니다 제발!\",\n  //   \"startPoint: \",\n  //   startPoint,\n  //   \"wayPoint: \",\n  //   wayPoint,\n  //   \"endPoint: \",\n  //   endPoint\n  // );\n  // const [resultDrawArr, setResultDrawArr] = useState([]);\n  // const [drawInfoArr, setDrawInfoArr] = useState([]);\n\n  let convertPoint;\n  let resultDrawArr = [];\n  let drawInfoArr = []; // 지도\n\n  useEffect(() => {\n    // console.log(\"마운트!\");\n    // 지도 띄우기\n    setTMap(new Tmapv2.Map(\"t-map\", {\n      center: new Tmapv2.LatLng(startY, startX),\n      width: \"800px\",\n      height: \"400px\",\n      zoom: 15\n    }));\n  }, []);\n  useEffect(() => {\n    // 출발지 마커(좌표값 변수화)\n    setMarker_s(new Tmapv2.Marker({\n      // position: new Tmapv2.LatLng(37.5668986, 126.97871544),\n      position: new Tmapv2.LatLng(startY, startX),\n      icon: \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_s.png\",\n      iconSize: new Tmapv2.Size(24, 38),\n      map: Tmap\n    }));\n  }, [resultData]);\n  useEffect(() => {\n    // 도착지 마커(좌표값 변수화)\n    setMarker_e(new Tmapv2.Marker({\n      position: new Tmapv2.LatLng(endY, endX),\n      icon: \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_e.png\",\n      iconSize: new Tmapv2.Size(24, 38),\n      map: Tmap\n    }));\n  }, [resultData]);\n  useEffect(() => {\n    // 경유지 마커(좌표값 변수화)\n    setMarker_p(new Tmapv2.Marker({\n      position: new Tmapv2.LatLng(wayY, wayX),\n      icon: \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_p.png\",\n      iconSize: new Tmapv2.Size(24, 38),\n      map: Tmap\n    }));\n  }, [resultData]);\n  useEffect(() => {\n    const params = {\n      appKey: `${process.env.REACT_APP_MY_TMAP_KEY}`\n    }; // 경로 찍기 요청(좌표값 변수화)\n    // passList: \"127.00080213,37.5591696189164\",\n\n    let data = {\n      startX: startX,\n      startY: startY,\n      endX: endX,\n      endY: endY,\n      passList: `${wayX},${wayY}`,\n      reqCoordType: \"WGS84GEO\",\n      resCoordType: \"EPSG3857\",\n      startName: \"출발지\",\n      endName: \"도착지\"\n    };\n    axios.post(\"https://apis.openapi.sk.com/tmap/routes/pedestrian?version=1&format=json&callback=result\", data, {\n      params\n    }).then(response => {\n      // const resultData = response.data.features;\n      setResultData(response.data.features); // console.log(\"result Data:\", resultData);\n      //기존 그려진 라인 & 마커가 있다면 초기화\n\n      if (resultDrawArr.length > 0) {\n        // console.log(\"너의 잘못이니?\", resultDrawArr);\n        resultDrawArr.forEach(draw => draw.setMap(null)); // for (let i in resultDrawArr) {\n        //   resultDrawArr[i].setMap(null);\n        // }\n        // setResultDrawArr([]);\n\n        resultDrawArr = [];\n      } // setDrawInfoArr([]);\n\n\n      drawInfoArr = []; // console.log(\"초기화한거맞지?\", resultDrawArr);\n\n      resultData.forEach(path => {\n        //for문 [S]\n        // console.log(\"경로 데이터\", path);\n        const geometry = path.geometry;\n        const properties = path.properties; // console.log(\"geometry\", geometry);\n        // console.log(\"properties\", properties);\n\n        if (geometry.type === \"LineString\") {\n          // console.log(\"줄긋기하니?\");\n          for (let j in geometry.coordinates) {\n            // console.log(\"객체 잘 구하고 있지??\");\n            // 경로들의 결과값(구간)들을 포인트 객체로 변환\n            let latlng = new Tmapv2.Point( // geometry.coordinates[0],\n            // geometry.coordinates[1]\n            geometry.coordinates[j][0], geometry.coordinates[j][1]); // 포인트 객체를 받아 좌표값으로 변환\n\n            convertPoint = new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(latlng); // 포인트객체의 정보로 좌표값 변환 객체로 저장\n\n            let convertChange = new Tmapv2.LatLng(convertPoint._lat, convertPoint._lng); // 배열에 담기\n            // setDrawInfoArr((prevArr) => {\n            //   return [...prevArr, convertChange];\n            // });\n\n            drawInfoArr.push(convertChange);\n          }\n        } else {\n          // type === Point일 때\n          // console.log(\"포인트니?\");\n          let markerImg = \"\";\n          let pType = \"\";\n          let size;\n\n          if (properties.pointType === \"S\") {\n            //출발지 마커\n            markerImg = \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_s.png\";\n            pType = \"S\";\n            size = new Tmapv2.Size(24, 38);\n          } else if (properties.pointType === \"E\") {\n            //도착지 마커\n            markerImg = \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_e.png\";\n            pType = \"E\";\n            size = new Tmapv2.Size(24, 38);\n          } else {\n            // console.log(\"여기로오나\");\n            //각 포인트 마커\n            markerImg = \"http://topopen.tmap.co.kr/imgs/point.png\";\n            pType = \"P\";\n            size = new Tmapv2.Size(8, 8);\n          } //////////////////////////////////////////////////////////\n          // 이 아래부터 필요없을 것 같은데 ?\n          // 경로들의 결과값들을 포인트 객체로 변환\n          // const latlon = new Tmapv2.Point(\n          //   geometry.coordinates[0],\n          //   geometry.coordinates[1]\n          // );\n          // console.log(\"latlon 필요해?\", latlon);\n          // 포인트 객체를 받아 좌표값으로 다시 변환\n          // convertPoint = new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(\n          //   latlon\n          // );\n          // console.log(\"convertPoint 필요해?\", convertPoint);\n          // const routeInfoObj = {\n          //   markerImage: markerImg,\n          //   lng: convertPoint._lng,\n          //   lat: convertPoint._lat,\n          //   pointType: pType,\n          // };\n          // // Marker 추가\n          // marker_p = new Tmapv2.Marker({\n          //   position: new Tmapv2.LatLng(routeInfoObj.lat, routeInfoObj.lng),\n          //   icon: routeInfoObj.markerImage,\n          //   iconSize: size,\n          //   map: Tmap,\n          // });\n          //////////////////////////////////////////////////////////\n\n        }\n      }); //for문 [E]\n      // console.log(\"그리기 직전의 배열상태는?\", drawInfoArr);\n\n      drawLine(drawInfoArr);\n    }).catch(error => {\n      console.log(\"error:\" + error);\n    });\n\n    function drawLine(arrPoint) {\n      let polyline_;\n      polyline_ = new Tmapv2.Polyline({\n        path: arrPoint,\n        strokeColor: \"#DD0000\",\n        strokeWeight: 6,\n        map: Tmap\n      }); // setResultDrawArr((prevArr) => [...prevArr, polyline_]);\n\n      resultDrawArr.push(polyline_);\n    }\n  }, [resultData]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map_wrap\",\n      className: \"map_wrap3\",\n      children: /*#__PURE__*/_jsxDEV(TMapContainer, {\n        id: \"t-map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map_act_btn_wrap clear_box\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CustomTMap, \"AzFDaBBnfDUe8JsCIW5+ZdRDLAk=\");\n\n_c2 = CustomTMap;\nexport default CustomTMap;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TMapContainer\");\n$RefreshReg$(_c2, \"CustomTMap\");","map":{"version":3,"sources":["D:/__Bitcamp/__crafts/02_final/project/1009~/PlanD/front-end/src/components/body/map/CustomTMap.jsx"],"names":["axios","React","useEffect","useState","styled","TMapContainer","div","Tmapv2","window","CustomTMap","startPoint","wayPoint","endPoint","Tmap","setTMap","marker_s","setMarker_s","marker_e","setMarker_e","marker_p","setMarker_p","resultData","setResultData","startX","lng","startY","lat","wayX","wayY","endX","endY","convertPoint","resultDrawArr","drawInfoArr","Map","center","LatLng","width","height","zoom","Marker","position","icon","iconSize","Size","map","params","appKey","process","env","REACT_APP_MY_TMAP_KEY","data","passList","reqCoordType","resCoordType","startName","endName","post","then","response","features","length","forEach","draw","setMap","path","geometry","properties","type","j","coordinates","latlng","Point","Projection","convertEPSG3857ToWGS84GEO","convertChange","_lat","_lng","push","markerImg","pType","size","pointType","drawLine","catch","error","console","log","arrPoint","polyline_","Polyline","strokeColor","strokeWeight"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TMapContainer = styled.div`\r\n  width: 800px;\r\n  height: 400px;\r\n`;\r\n\r\nconst { Tmapv2 } = window;\r\n\r\nconst CustomTMap = ({ startPoint = {}, wayPoint = {}, endPoint = {} }) => {\r\n  const [Tmap, setTMap] = useState();\r\n  const [marker_s, setMarker_s] = useState();\r\n  const [marker_e, setMarker_e] = useState();\r\n  const [marker_p, setMarker_p] = useState();\r\n  const [resultData, setResultData] = useState([]);\r\n\r\n  const startX = startPoint?.lng;\r\n  const startY = startPoint?.lat;\r\n  const wayX = wayPoint?.lng;\r\n  const wayY = wayPoint?.lat;\r\n  const endX = endPoint?.lng;\r\n  const endY = endPoint?.lat;\r\n  // console.log(\r\n  //   \"이곳은 마커가 찍혀야 하는 곳입니다 제발!\",\r\n  //   \"startPoint: \",\r\n  //   startPoint,\r\n  //   \"wayPoint: \",\r\n  //   wayPoint,\r\n  //   \"endPoint: \",\r\n  //   endPoint\r\n  // );\r\n  // const [resultDrawArr, setResultDrawArr] = useState([]);\r\n  // const [drawInfoArr, setDrawInfoArr] = useState([]);\r\n  let convertPoint;\r\n  let resultDrawArr = [];\r\n  let drawInfoArr = [];\r\n\r\n  // 지도\r\n  useEffect(() => {\r\n    // console.log(\"마운트!\");\r\n    // 지도 띄우기\r\n    setTMap(\r\n      new Tmapv2.Map(\"t-map\", {\r\n        center: new Tmapv2.LatLng(startY, startX),\r\n        width: \"800px\",\r\n        height: \"400px\",\r\n        zoom: 15,\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // 출발지 마커(좌표값 변수화)\r\n    setMarker_s(\r\n      new Tmapv2.Marker({\r\n        // position: new Tmapv2.LatLng(37.5668986, 126.97871544),\r\n        position: new Tmapv2.LatLng(startY, startX),\r\n        icon: \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_s.png\",\r\n        iconSize: new Tmapv2.Size(24, 38),\r\n        map: Tmap,\r\n      })\r\n    );\r\n  }, [resultData]);\r\n\r\n  useEffect(() => {\r\n    // 도착지 마커(좌표값 변수화)\r\n    setMarker_e(\r\n      new Tmapv2.Marker({\r\n        position: new Tmapv2.LatLng(endY, endX),\r\n        icon: \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_e.png\",\r\n        iconSize: new Tmapv2.Size(24, 38),\r\n        map: Tmap,\r\n      })\r\n    );\r\n  }, [resultData]);\r\n\r\n  useEffect(() => {\r\n    // 경유지 마커(좌표값 변수화)\r\n    setMarker_p(\r\n      new Tmapv2.Marker({\r\n        position: new Tmapv2.LatLng(wayY, wayX),\r\n        icon: \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_p.png\",\r\n        iconSize: new Tmapv2.Size(24, 38),\r\n        map: Tmap,\r\n      })\r\n    );\r\n  }, [resultData]);\r\n\r\n  useEffect(() => {\r\n    const params = {\r\n      appKey: `${process.env.REACT_APP_MY_TMAP_KEY}`,\r\n    };\r\n    // 경로 찍기 요청(좌표값 변수화)\r\n    // passList: \"127.00080213,37.5591696189164\",\r\n    let data = {\r\n      startX: startX,\r\n      startY: startY,\r\n      endX: endX,\r\n      endY: endY,\r\n      passList: `${wayX},${wayY}`,\r\n      reqCoordType: \"WGS84GEO\",\r\n      resCoordType: \"EPSG3857\",\r\n      startName: \"출발지\",\r\n      endName: \"도착지\",\r\n    };\r\n\r\n    axios\r\n      .post(\r\n        \"https://apis.openapi.sk.com/tmap/routes/pedestrian?version=1&format=json&callback=result\",\r\n        data,\r\n        { params }\r\n      )\r\n      .then((response) => {\r\n        // const resultData = response.data.features;\r\n        setResultData(response.data.features);\r\n        // console.log(\"result Data:\", resultData);\r\n\r\n        //기존 그려진 라인 & 마커가 있다면 초기화\r\n        if (resultDrawArr.length > 0) {\r\n          // console.log(\"너의 잘못이니?\", resultDrawArr);\r\n          resultDrawArr.forEach((draw) => draw.setMap(null));\r\n          // for (let i in resultDrawArr) {\r\n          //   resultDrawArr[i].setMap(null);\r\n          // }\r\n          // setResultDrawArr([]);\r\n          resultDrawArr = [];\r\n        }\r\n        // setDrawInfoArr([]);\r\n        drawInfoArr = [];\r\n        // console.log(\"초기화한거맞지?\", resultDrawArr);\r\n\r\n        resultData.forEach((path) => {\r\n          //for문 [S]\r\n          // console.log(\"경로 데이터\", path);\r\n          const geometry = path.geometry;\r\n          const properties = path.properties;\r\n          // console.log(\"geometry\", geometry);\r\n          // console.log(\"properties\", properties);\r\n\r\n          if (geometry.type === \"LineString\") {\r\n            // console.log(\"줄긋기하니?\");\r\n            for (let j in geometry.coordinates) {\r\n              // console.log(\"객체 잘 구하고 있지??\");\r\n              // 경로들의 결과값(구간)들을 포인트 객체로 변환\r\n              let latlng = new Tmapv2.Point(\r\n                // geometry.coordinates[0],\r\n                // geometry.coordinates[1]\r\n                geometry.coordinates[j][0],\r\n                geometry.coordinates[j][1]\r\n              );\r\n              // 포인트 객체를 받아 좌표값으로 변환\r\n              convertPoint = new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(\r\n                latlng\r\n              );\r\n              // 포인트객체의 정보로 좌표값 변환 객체로 저장\r\n              let convertChange = new Tmapv2.LatLng(\r\n                convertPoint._lat,\r\n                convertPoint._lng\r\n              );\r\n              // 배열에 담기\r\n              // setDrawInfoArr((prevArr) => {\r\n              //   return [...prevArr, convertChange];\r\n              // });\r\n              drawInfoArr.push(convertChange);\r\n            }\r\n          } else {\r\n            // type === Point일 때\r\n            // console.log(\"포인트니?\");\r\n            let markerImg = \"\";\r\n            let pType = \"\";\r\n            let size;\r\n\r\n            if (properties.pointType === \"S\") {\r\n              //출발지 마커\r\n              markerImg =\r\n                \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_s.png\";\r\n              pType = \"S\";\r\n              size = new Tmapv2.Size(24, 38);\r\n            } else if (properties.pointType === \"E\") {\r\n              //도착지 마커\r\n              markerImg =\r\n                \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_e.png\";\r\n              pType = \"E\";\r\n              size = new Tmapv2.Size(24, 38);\r\n            } else {\r\n              // console.log(\"여기로오나\");\r\n              //각 포인트 마커\r\n              markerImg = \"http://topopen.tmap.co.kr/imgs/point.png\";\r\n              pType = \"P\";\r\n              size = new Tmapv2.Size(8, 8);\r\n            }\r\n\r\n            //////////////////////////////////////////////////////////\r\n            // 이 아래부터 필요없을 것 같은데 ?\r\n            // 경로들의 결과값들을 포인트 객체로 변환\r\n            // const latlon = new Tmapv2.Point(\r\n            //   geometry.coordinates[0],\r\n            //   geometry.coordinates[1]\r\n            // );\r\n            // console.log(\"latlon 필요해?\", latlon);\r\n\r\n            // 포인트 객체를 받아 좌표값으로 다시 변환\r\n            // convertPoint = new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(\r\n            //   latlon\r\n            // );\r\n            // console.log(\"convertPoint 필요해?\", convertPoint);\r\n\r\n            // const routeInfoObj = {\r\n            //   markerImage: markerImg,\r\n            //   lng: convertPoint._lng,\r\n            //   lat: convertPoint._lat,\r\n            //   pointType: pType,\r\n            // };\r\n\r\n            // // Marker 추가\r\n            // marker_p = new Tmapv2.Marker({\r\n            //   position: new Tmapv2.LatLng(routeInfoObj.lat, routeInfoObj.lng),\r\n            //   icon: routeInfoObj.markerImage,\r\n            //   iconSize: size,\r\n            //   map: Tmap,\r\n            // });\r\n            //////////////////////////////////////////////////////////\r\n          }\r\n        }); //for문 [E]\r\n        // console.log(\"그리기 직전의 배열상태는?\", drawInfoArr);\r\n        drawLine(drawInfoArr);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"error:\" + error);\r\n      });\r\n\r\n    function drawLine(arrPoint) {\r\n      let polyline_;\r\n\r\n      polyline_ = new Tmapv2.Polyline({\r\n        path: arrPoint,\r\n        strokeColor: \"#DD0000\",\r\n        strokeWeight: 6,\r\n        map: Tmap,\r\n      });\r\n      // setResultDrawArr((prevArr) => [...prevArr, polyline_]);\r\n      resultDrawArr.push(polyline_);\r\n    }\r\n  }, [resultData]);\r\n\r\n  return (\r\n    <>\r\n      <div id=\"map_wrap\" className=\"map_wrap3\">\r\n        <TMapContainer id=\"t-map\"></TMapContainer>\r\n      </div>\r\n      <div className=\"map_act_btn_wrap clear_box\"></div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CustomTMap;\r\n"]},"metadata":{},"sourceType":"module"}