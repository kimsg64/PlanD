{"ast":null,"code":"var _jsxFileName = \"D:\\\\__Bitcamp\\\\__crafts\\\\02_final\\\\project\\\\1009~\\\\PlanD\\\\front-end\\\\src\\\\components\\\\body\\\\map\\\\GoogleMapSettings.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport CustomGoogleMap from \"./CustomGoogleMap\";\nimport Geocode from \"react-geocode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GoogleMapSettings = ({\n  address = [],\n  address1 = \"\",\n  address2 = \"\",\n  address3 = \"\"\n}) => {\n  _s();\n\n  // 리버스 Geocode (주소로 좌표 구하기)\n  // 좌표를 담을 배열(기본 빈 배열)\n  const [places, setPlaces] = useState([]); // 기본 설정(key, 언어, 장소)\n  // 마운트시에 한 번 실행\n\n  useEffect(() => {\n    Geocode.setApiKey(process.env.REACT_APP_MY_KEY);\n    Geocode.setLanguage(\"ko\");\n    Geocode.setRegion(\"ko\"); // 주소로 좌표 구하는 함수\n\n    const getLatLng = address => {\n      Geocode.fromAddress(address).then(response => {\n        const {\n          lat,\n          lng\n        } = response.results[0].geometry.location;\n        console.log({\n          lat,\n          lng\n        });\n        setPlaces(prevPlaces => {\n          console.log(\"이전값\", prevPlaces);\n          return [...prevPlaces, {\n            lat: lat,\n            lng: lng\n          }];\n        });\n        console.log(\"places 업데이트 됐나?\", places);\n      }, error => {\n        console.log(\"error\", error);\n      });\n    }; // console.log(\"주소 array: \", address);\n    // console.log(address1);\n    // console.log(address2);\n    // console.log(address3);\n\n\n    getLatLng(address1);\n    getLatLng(address2);\n    getLatLng(address3);\n    console.log(\"허허\", places);\n  }, []); // 장소1, 2, 3의 위도, 경도값('순서' 필드 참조)\n\n  const latlngs = [{\n    lat: 33.499648,\n    lng: 126.531275\n  }, {\n    lat: 33.2553,\n    lng: 126.560114\n  }, {\n    lat: 37.34859,\n    lng: 126.958301\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(CustomGoogleMap, {\n      startPoint: {\n        lat: latlngs[0].lat,\n        lng: latlngs[0].lng\n      },\n      endPoint: {\n        lat: latlngs[1].lat,\n        lng: latlngs[1].lng\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GoogleMapSettings, \"Ez2sxHqHwXplpokbasymv65s8jQ=\");\n\n_c = GoogleMapSettings;\nexport default GoogleMapSettings;\n\nvar _c;\n\n$RefreshReg$(_c, \"GoogleMapSettings\");","map":{"version":3,"sources":["D:/__Bitcamp/__crafts/02_final/project/1009~/PlanD/front-end/src/components/body/map/GoogleMapSettings.jsx"],"names":["React","useState","useEffect","CustomGoogleMap","Geocode","GoogleMapSettings","address","address1","address2","address3","places","setPlaces","setApiKey","process","env","REACT_APP_MY_KEY","setLanguage","setRegion","getLatLng","fromAddress","then","response","lat","lng","results","geometry","location","console","log","prevPlaces","error","latlngs"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport CustomGoogleMap from \"./CustomGoogleMap\";\r\nimport Geocode from \"react-geocode\";\r\n\r\nconst GoogleMapSettings = ({\r\n  address = [],\r\n  address1 = \"\",\r\n  address2 = \"\",\r\n  address3 = \"\",\r\n}) => {\r\n  // 리버스 Geocode (주소로 좌표 구하기)\r\n  // 좌표를 담을 배열(기본 빈 배열)\r\n  const [places, setPlaces] = useState([]);\r\n  // 기본 설정(key, 언어, 장소)\r\n\r\n  // 마운트시에 한 번 실행\r\n  useEffect(() => {\r\n    Geocode.setApiKey(process.env.REACT_APP_MY_KEY);\r\n    Geocode.setLanguage(\"ko\");\r\n    Geocode.setRegion(\"ko\");\r\n    // 주소로 좌표 구하는 함수\r\n    const getLatLng = (address) => {\r\n      Geocode.fromAddress(address).then(\r\n        (response) => {\r\n          const { lat, lng } = response.results[0].geometry.location;\r\n          console.log({ lat, lng });\r\n          setPlaces((prevPlaces) => {\r\n            console.log(\"이전값\", prevPlaces);\r\n            return [...prevPlaces, { lat: lat, lng: lng }];\r\n          });\r\n          console.log(\"places 업데이트 됐나?\", places);\r\n        },\r\n        (error) => {\r\n          console.log(\"error\", error);\r\n        }\r\n      );\r\n    };\r\n    // console.log(\"주소 array: \", address);\r\n    // console.log(address1);\r\n    // console.log(address2);\r\n    // console.log(address3);\r\n    getLatLng(address1);\r\n    getLatLng(address2);\r\n    getLatLng(address3);\r\n    console.log(\"허허\", places);\r\n  }, []);\r\n\r\n  // 장소1, 2, 3의 위도, 경도값('순서' 필드 참조)\r\n  const latlngs = [\r\n    { lat: 33.499648, lng: 126.531275 },\r\n    { lat: 33.2553, lng: 126.560114 },\r\n    { lat: 37.34859, lng: 126.958301 },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <CustomGoogleMap\r\n        startPoint={{ lat: latlngs[0].lat, lng: latlngs[0].lng }}\r\n        endPoint={{ lat: latlngs[1].lat, lng: latlngs[1].lng }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoogleMapSettings;\r\n"]},"metadata":{},"sourceType":"module"}