{"ast":null,"code":"var _jsxFileName = \"D:\\\\__Bitcamp\\\\__crafts\\\\02_final\\\\project\\\\1009~\\\\PlanD\\\\front-end\\\\src\\\\components\\\\body\\\\map\\\\CustomTMap.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TMapContainer = styled.div`\n  width: 800px;\n  height: 400px;\n`;\n_c = TMapContainer;\nconst {\n  Tmapv2\n} = window;\n\nconst CustomTMap = () => {\n  _s();\n\n  const [Tmap, setTMap] = useState(null);\n  const [marker_s, setMarker_s] = useState(null);\n  const [marker_e, setMarker_e] = useState(null);\n  const [marker_p, setMarker_p] = useState(null);\n  const [resultDrawArr, setResultDrawArr] = useState([]);\n  const [drawInfoArr, setDrawInfoArr] = useState([]);\n  useEffect(() => {\n    console.log(\"마운트!\"); // 지도 띄우기\n\n    setTMap(new Tmapv2.Map(\"t-map\", {\n      center: new Tmapv2.LatLng(37.566481622437934, 126.98502302169841),\n      width: \"800px\",\n      height: \"400px\",\n      zoom: 15\n    })); // 출발지 마커(좌표값 변수화)\n\n    setMarker_s(new Tmapv2.Marker({\n      position: new Tmapv2.LatLng(37.5668986, 126.97871544),\n      icon: \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_s.png\",\n      iconSize: new Tmapv2.Size(24, 38),\n      map: Tmap\n    })); // 도착지 마커(좌표값 변수화)\n\n    setMarker_e(new Tmapv2.Marker({\n      position: new Tmapv2.LatLng(37.57081522, 127.00160213),\n      icon: \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_e.png\",\n      iconSize: new Tmapv2.Size(24, 38),\n      map: Tmap\n    })); // 경유지 마커(좌표값 변수화)\n\n    setMarker_p(new Tmapv2.Marker({\n      position: new Tmapv2.LatLng(37.5591696189164, 127.00080213),\n      icon: \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_p.png\",\n      iconSize: new Tmapv2.Size(24, 38),\n      map: Tmap\n    })); // 경로 찍기 요청(좌표값 변수화)\n\n    const data = {\n      startX: \"126.97871544\",\n      startY: \"37.56689860\",\n      endX: \"127.00160213\",\n      endY: \"37.57081522\",\n      passList: \"127.00080213,37.5591696189164\",\n      reqCoordType: \"WGS84GEO\",\n      resCoordType: \"EPSG3857\",\n      startName: \"출발지\",\n      endName: \"도착지\"\n    };\n    const params = {\n      appKey: \"l7xx1f2e7bf8d081449caa3ee9ffbeec5f41\"\n    };\n    axios.post(\"https://apis.openapi.sk.com/tmap/routes/pedestrian?version=1&format=json&callback=result\", data, {\n      params\n    }).then(response => {\n      const resultData = response.data.features;\n      console.log(\"result Data:\", resultData); //기존 그려진 라인 & 마커가 있다면 초기화\n\n      if (resultDrawArr.length > 0) {\n        resultDrawArr.forEach(draw => draw.setMap(null)); // for (let i in resultDrawArr) {\n        //   resultDrawArr[i].setMap(null);\n        // }\n\n        setResultDrawArr([]);\n      }\n\n      setDrawInfoArr([]);\n      resultData.forEach(path => {\n        //for문 [S]\n        console.log(\"경로 데이터\", path);\n        const geometry = path.geometry;\n        const properties = path.properties;\n        console.log(\"geometry\", geometry);\n        console.log(\"properties\", properties);\n\n        if (geometry.type === \"LineString\") {\n          console.log(\"줄긋기하니?\");\n\n          for (var j in geometry.coordinates) {\n            // 경로들의 결과값(구간)들을 포인트 객체로 변환\n            var latlng = new Tmapv2.Point(geometry.coordinates[j][0], geometry.coordinates[j][1]); // 포인트 객체를 받아 좌표값으로 변환\n\n            var convertPoint = new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(latlng); // 포인트객체의 정보로 좌표값 변환 객체로 저장\n\n            var convertChange = new Tmapv2.LatLng(convertPoint._lat, convertPoint._lng); // 배열에 담기\n\n            setDrawInfoArr(prevArr => {\n              return [...prevArr, convertChange];\n            });\n          }\n        } else {\n          var markerImg = \"\";\n          var pType = \"\";\n          var size;\n\n          if (properties.pointType === \"S\") {\n            //출발지 마커\n            markerImg = \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_s.png\";\n            pType = \"S\";\n            size = new Tmapv2.Size(24, 38);\n          } else if (properties.pointType === \"E\") {\n            //도착지 마커\n            markerImg = \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_e.png\";\n            pType = \"E\";\n            size = new Tmapv2.Size(24, 38);\n          } else {\n            //각 포인트 마커\n            markerImg = \"http://topopen.tmap.co.kr/imgs/point.png\";\n            pType = \"P\";\n            size = new Tmapv2.Size(8, 8);\n          } // 경로들의 결과값들을 포인트 객체로 변환\n\n\n          var latlon = new Tmapv2.Point(geometry.coordinates[0], geometry.coordinates[1]); // 포인트 객체를 받아 좌표값으로 다시 변환\n\n          var convertPoint = new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(latlon);\n          var routeInfoObj = {\n            markerImage: markerImg,\n            lng: convertPoint._lng,\n            lat: convertPoint._lat,\n            pointType: pType\n          }; // Marker 추가\n\n          marker_p = new Tmapv2.Marker({\n            position: new Tmapv2.LatLng(routeInfoObj.lat, routeInfoObj.lng),\n            icon: routeInfoObj.markerImage,\n            iconSize: size,\n            map: Tmap\n          });\n        }\n      }); //for문 [E]\n\n      drawLine(drawInfoArr);\n    }).catch((request, status, error) => {\n      console.log(\"code:\" + request.status + \"\\n\" + \"message:\" + request.responseText + \"\\n\" + \"error:\" + error);\n    });\n\n    function drawLine(arrPoint) {\n      var polyline_;\n      polyline_ = new Tmapv2.Polyline({\n        path: arrPoint,\n        strokeColor: \"#DD0000\",\n        strokeWeight: 6,\n        map: Tmap\n      });\n      resultDrawArr.push(polyline_);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map_wrap\",\n      className: \"map_wrap3\",\n      children: /*#__PURE__*/_jsxDEV(TMapContainer, {\n        id: \"t-map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map_act_btn_wrap clear_box\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CustomTMap, \"8c9YwJ7T5Fpk5KjRginDTA4zTHw=\");\n\n_c2 = CustomTMap;\nexport default CustomTMap;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TMapContainer\");\n$RefreshReg$(_c2, \"CustomTMap\");","map":{"version":3,"sources":["D:/__Bitcamp/__crafts/02_final/project/1009~/PlanD/front-end/src/components/body/map/CustomTMap.jsx"],"names":["axios","React","useEffect","useState","styled","TMapContainer","div","Tmapv2","window","CustomTMap","Tmap","setTMap","marker_s","setMarker_s","marker_e","setMarker_e","marker_p","setMarker_p","resultDrawArr","setResultDrawArr","drawInfoArr","setDrawInfoArr","console","log","Map","center","LatLng","width","height","zoom","Marker","position","icon","iconSize","Size","map","data","startX","startY","endX","endY","passList","reqCoordType","resCoordType","startName","endName","params","appKey","post","then","response","resultData","features","length","forEach","draw","setMap","path","geometry","properties","type","j","coordinates","latlng","Point","convertPoint","Projection","convertEPSG3857ToWGS84GEO","convertChange","_lat","_lng","prevArr","markerImg","pType","size","pointType","latlon","routeInfoObj","markerImage","lng","lat","drawLine","catch","request","status","error","responseText","arrPoint","polyline_","Polyline","strokeColor","strokeWeight","push"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TMapContainer = styled.div`\r\n  width: 800px;\r\n  height: 400px;\r\n`;\r\n\r\nconst { Tmapv2 } = window;\r\n\r\nconst CustomTMap = () => {\r\n  const [Tmap, setTMap] = useState(null);\r\n  const [marker_s, setMarker_s] = useState(null);\r\n  const [marker_e, setMarker_e] = useState(null);\r\n  const [marker_p, setMarker_p] = useState(null);\r\n  const [resultDrawArr, setResultDrawArr] = useState([]);\r\n  const [drawInfoArr, setDrawInfoArr] = useState([]);\r\n  useEffect(() => {\r\n    console.log(\"마운트!\");\r\n    // 지도 띄우기\r\n    setTMap(\r\n      new Tmapv2.Map(\"t-map\", {\r\n        center: new Tmapv2.LatLng(37.566481622437934, 126.98502302169841),\r\n        width: \"800px\",\r\n        height: \"400px\",\r\n        zoom: 15,\r\n      })\r\n    );\r\n\r\n    // 출발지 마커(좌표값 변수화)\r\n    setMarker_s(\r\n      new Tmapv2.Marker({\r\n        position: new Tmapv2.LatLng(37.5668986, 126.97871544),\r\n        icon: \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_s.png\",\r\n        iconSize: new Tmapv2.Size(24, 38),\r\n        map: Tmap,\r\n      })\r\n    );\r\n\r\n    // 도착지 마커(좌표값 변수화)\r\n    setMarker_e(\r\n      new Tmapv2.Marker({\r\n        position: new Tmapv2.LatLng(37.57081522, 127.00160213),\r\n        icon: \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_e.png\",\r\n        iconSize: new Tmapv2.Size(24, 38),\r\n        map: Tmap,\r\n      })\r\n    );\r\n\r\n    // 경유지 마커(좌표값 변수화)\r\n    setMarker_p(\r\n      new Tmapv2.Marker({\r\n        position: new Tmapv2.LatLng(37.5591696189164, 127.00080213),\r\n        icon: \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_p.png\",\r\n        iconSize: new Tmapv2.Size(24, 38),\r\n        map: Tmap,\r\n      })\r\n    );\r\n\r\n    // 경로 찍기 요청(좌표값 변수화)\r\n    const data = {\r\n      startX: \"126.97871544\",\r\n      startY: \"37.56689860\",\r\n      endX: \"127.00160213\",\r\n      endY: \"37.57081522\",\r\n      passList: \"127.00080213,37.5591696189164\",\r\n      reqCoordType: \"WGS84GEO\",\r\n      resCoordType: \"EPSG3857\",\r\n      startName: \"출발지\",\r\n      endName: \"도착지\",\r\n    };\r\n\r\n    const params = {\r\n      appKey: \"l7xx1f2e7bf8d081449caa3ee9ffbeec5f41\",\r\n    };\r\n    axios\r\n      .post(\r\n        \"https://apis.openapi.sk.com/tmap/routes/pedestrian?version=1&format=json&callback=result\",\r\n        data,\r\n        { params }\r\n      )\r\n      .then((response) => {\r\n        const resultData = response.data.features;\r\n        console.log(\"result Data:\", resultData);\r\n\r\n        //기존 그려진 라인 & 마커가 있다면 초기화\r\n        if (resultDrawArr.length > 0) {\r\n          resultDrawArr.forEach((draw) => draw.setMap(null));\r\n          // for (let i in resultDrawArr) {\r\n          //   resultDrawArr[i].setMap(null);\r\n          // }\r\n          setResultDrawArr([]);\r\n        }\r\n        setDrawInfoArr([]);\r\n\r\n        resultData.forEach((path) => {\r\n          //for문 [S]\r\n          console.log(\"경로 데이터\", path);\r\n          const geometry = path.geometry;\r\n          const properties = path.properties;\r\n          console.log(\"geometry\", geometry);\r\n          console.log(\"properties\", properties);\r\n\r\n          if (geometry.type === \"LineString\") {\r\n            console.log(\"줄긋기하니?\");\r\n            for (var j in geometry.coordinates) {\r\n              // 경로들의 결과값(구간)들을 포인트 객체로 변환\r\n              var latlng = new Tmapv2.Point(\r\n                geometry.coordinates[j][0],\r\n                geometry.coordinates[j][1]\r\n              );\r\n              // 포인트 객체를 받아 좌표값으로 변환\r\n              var convertPoint =\r\n                new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(latlng);\r\n              // 포인트객체의 정보로 좌표값 변환 객체로 저장\r\n              var convertChange = new Tmapv2.LatLng(\r\n                convertPoint._lat,\r\n                convertPoint._lng\r\n              );\r\n              // 배열에 담기\r\n              setDrawInfoArr((prevArr) => {\r\n                return [...prevArr, convertChange];\r\n              });\r\n            }\r\n          } else {\r\n            var markerImg = \"\";\r\n            var pType = \"\";\r\n            var size;\r\n\r\n            if (properties.pointType === \"S\") {\r\n              //출발지 마커\r\n              markerImg =\r\n                \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_s.png\";\r\n              pType = \"S\";\r\n              size = new Tmapv2.Size(24, 38);\r\n            } else if (properties.pointType === \"E\") {\r\n              //도착지 마커\r\n              markerImg =\r\n                \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_e.png\";\r\n              pType = \"E\";\r\n              size = new Tmapv2.Size(24, 38);\r\n            } else {\r\n              //각 포인트 마커\r\n              markerImg = \"http://topopen.tmap.co.kr/imgs/point.png\";\r\n              pType = \"P\";\r\n              size = new Tmapv2.Size(8, 8);\r\n            }\r\n\r\n            // 경로들의 결과값들을 포인트 객체로 변환\r\n            var latlon = new Tmapv2.Point(\r\n              geometry.coordinates[0],\r\n              geometry.coordinates[1]\r\n            );\r\n\r\n            // 포인트 객체를 받아 좌표값으로 다시 변환\r\n            var convertPoint = new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(\r\n              latlon\r\n            );\r\n\r\n            var routeInfoObj = {\r\n              markerImage: markerImg,\r\n              lng: convertPoint._lng,\r\n              lat: convertPoint._lat,\r\n              pointType: pType,\r\n            };\r\n\r\n            // Marker 추가\r\n            marker_p = new Tmapv2.Marker({\r\n              position: new Tmapv2.LatLng(routeInfoObj.lat, routeInfoObj.lng),\r\n              icon: routeInfoObj.markerImage,\r\n              iconSize: size,\r\n              map: Tmap,\r\n            });\r\n          }\r\n        }); //for문 [E]\r\n        drawLine(drawInfoArr);\r\n      })\r\n      .catch((request, status, error) => {\r\n        console.log(\r\n          \"code:\" +\r\n            request.status +\r\n            \"\\n\" +\r\n            \"message:\" +\r\n            request.responseText +\r\n            \"\\n\" +\r\n            \"error:\" +\r\n            error\r\n        );\r\n      });\r\n    function drawLine(arrPoint) {\r\n      var polyline_;\r\n\r\n      polyline_ = new Tmapv2.Polyline({\r\n        path: arrPoint,\r\n        strokeColor: \"#DD0000\",\r\n        strokeWeight: 6,\r\n        map: Tmap,\r\n      });\r\n      resultDrawArr.push(polyline_);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div id=\"map_wrap\" className=\"map_wrap3\">\r\n        <TMapContainer id=\"t-map\"></TMapContainer>\r\n      </div>\r\n      <div className=\"map_act_btn_wrap clear_box\"></div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CustomTMap;\r\n"]},"metadata":{},"sourceType":"module"}