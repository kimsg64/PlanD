{"ast":null,"code":"var _jsxFileName = \"D:\\\\__Bitcamp\\\\__crafts\\\\02_final\\\\project\\\\where-we-go\\\\front-end\\\\src\\\\components\\\\body\\\\map\\\\KakaoMap.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapContainer = styled.div`\n  width: 800px;\n  height: 400px;\n`;\n_c = MapContainer;\nconst {\n  kakao\n} = window;\n\nconst KakaoMap = ({\n  place = \"\"\n}) => {\n  _s();\n\n  useEffect(() => {\n    // const container = document.getElementById(\"map\");\n    // const options = {\n    //   // center: 지도의 중심\n    //   center: new kakao.maps.LatLng(37.365264512305174, 127.10676860117488),\n    //   // level: 확대/축소 정도\n    //   level: 3,\n    // };\n    // const map = new kakao.maps.Map(container, options);\n    // let markers = [];\n    // // 장소 검색기\n    // const places = new kakao.maps.services.Places();\n    // // 클릭시 표시될 인포윈도우\n    // const infoWindow = new kakao.maps.InfoWindow({ zIndex: 1 });\n    // // 검색이 완료되었을 때\n    // const completeSearching = (data, status, pagination) => {\n    //   if (status === kakao.maps.services.Status.OK) {\n    //     displayPlaces(data);\n    //     displayPagination(pagination);\n    //   } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\n    //     alert(\"검색결과가 없어용...\");\n    //     return;\n    //   } else if (status === kakao.maps.services.Status.ERROR) {\n    //     alert(\"오류가 생겼어용...\");\n    //     return;\n    //   }\n    // };\n    // // 키워드가 입력되어 검색이 실행되었을 떄\n    // const searchPlaces = () => {\n    //   if (!place.replace(/^\\s+|\\s+$/g, \"\")) {\n    //     alert(\"키워드 입력하시죠\");\n    //     return false;\n    //   }\n    //   places.keywordSearch(place, completeSearching);\n    // };\n    // searchPlaces();\n    // // 검색 결과 장소를 표시\n    // const displayPlaces = (data) => {\n    //   const list = document.getElementById(\"placesList\"),\n    //     menu = document.getElementById(\"menu-wrap\"),\n    //     fragment = document.createDocumentFragment(),\n    //     bounds = new kakao.maps.LatLngBounds(),\n    //     listStr = \"\";\n    //   removeAllChildNods(list);\n    //   removeMarker();\n    //   for (let i = 0; i < data.length; i++) {\n    //     const placePosition = new kakao.maps.LatLng(places[i].y, places[i].x),\n    //       marker = addMarker(placePosition, i),\n    //       item = getListItem(i, places[i]);\n    //     bounds.extend(placePosition);\n    //     (function (marker, title) {\n    //       kakao.maps.event.addListener(marker, \"mouseover\", function () {\n    //         displayInfowindow(marker, title);\n    //       });\n    //       kakao.maps.event.addListener(marker, \"mouseout\", function () {\n    //         infoWindow.close();\n    //       });\n    //       item.onmouseover = function () {\n    //         displayInfowindow(marker, title);\n    //       };\n    //       item.onmouseout = function () {\n    //         infoWindow.close();\n    //       };\n    //     })(marker, places[i].place_name);\n    //     fragment.appendChild(item);\n    //   }\n    //   list.appendChild(fragment);\n    //   menu.scrollTop = 0;\n    //   map.setBounds(bounds);\n    // };\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // 그대로 복붙\n    // 마커를 담을 배열입니다\n    var markers = [];\n    var mapContainer = document.getElementById(\"map\"),\n        // 지도를 표시할 div\n    mapOption = {\n      center: new kakao.maps.LatLng(37.566826, 126.9786567),\n      // 지도의 중심좌표\n      level: 3 // 지도의 확대 레벨\n\n    }; // 지도를 생성합니다\n\n    var map = new kakao.maps.Map(mapContainer, mapOption); // 장소 검색 객체를 생성합니다\n\n    var ps = new kakao.maps.services.Places(); // 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다\n\n    var infowindow = new kakao.maps.InfoWindow({\n      zIndex: 1\n    }); // 키워드로 장소를 검색합니다\n\n    searchPlaces(); // 키워드 검색을 요청하는 함수입니다\n\n    function searchPlaces() {\n      var keyword = place;\n\n      if (!keyword.replace(/^\\s+|\\s+$/g, \"\")) {\n        alert(\"키워드를 입력해주세요!\");\n        return false;\n      } // 장소검색 객체를 통해 키워드로 장소검색을 요청합니다\n\n\n      ps.keywordSearch(keyword, placesSearchCB);\n    } // 장소검색이 완료됐을 때 호출되는 콜백함수 입니다\n\n\n    function placesSearchCB(data, status, pagination) {\n      if (status === kakao.maps.services.Status.OK) {\n        // 정상적으로 검색이 완료됐으면\n        // 검색 목록과 마커를 표출합니다\n        displayPlaces(data); // 페이지 번호를 표출합니다\n\n        displayPagination(pagination);\n      } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\n        alert(\"검색 결과가 존재하지 않습니다.\");\n        return;\n      } else if (status === kakao.maps.services.Status.ERROR) {\n        alert(\"검색 결과 중 오류가 발생했습니다.\");\n        return;\n      }\n    } // 검색 결과 목록과 마커를 표출하는 함수입니다\n\n\n    function displayPlaces(places) {\n      var listEl = document.getElementById(\"placesList\"),\n          menuEl = document.getElementById(\"menu_wrap\"),\n          fragment = document.createDocumentFragment(),\n          bounds = new kakao.maps.LatLngBounds(),\n          listStr = \"\"; // 검색 결과 목록에 추가된 항목들을 제거합니다\n\n      removeAllChildNods(listEl); // 지도에 표시되고 있는 마커를 제거합니다\n\n      removeMarker();\n\n      for (var i = 0; i < places.length; i++) {\n        // 마커를 생성하고 지도에 표시합니다\n        var placePosition = new kakao.maps.LatLng(places[i].y, places[i].x),\n            marker = addMarker(placePosition, i),\n            itemEl = getListItem(i, places[i]); // 검색 결과 항목 Element를 생성합니다\n        // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\n        // LatLngBounds 객체에 좌표를 추가합니다\n\n        bounds.extend(placePosition); // 마커와 검색결과 항목에 mouseover 했을때\n        // 해당 장소에 인포윈도우에 장소명을 표시합니다\n        // mouseout 했을 때는 인포윈도우를 닫습니다\n\n        (function (marker, title) {\n          kakao.maps.event.addListener(marker, \"mouseover\", function () {\n            displayInfowindow(marker, title);\n          });\n          kakao.maps.event.addListener(marker, \"mouseout\", function () {\n            infowindow.close();\n          });\n\n          itemEl.onmouseover = function () {\n            displayInfowindow(marker, title);\n          };\n\n          itemEl.onmouseout = function () {\n            infowindow.close();\n          };\n        })(marker, places[i].place_name);\n\n        fragment.appendChild(itemEl);\n      } // 검색결과 항목들을 검색결과 목록 Elemnet에 추가합니다\n\n\n      listEl.appendChild(fragment);\n      menuEl.scrollTop = 0; // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\n\n      map.setBounds(bounds);\n    } // 검색결과 항목을 Element로 반환하는 함수입니다\n\n\n    function getListItem(index, places) {\n      var el = document.createElement(\"li\"),\n          itemStr = '<span class=\"markerbg marker_' + (index + 1) + '\"></span>' + '<div class=\"info\">' + \"   <h5>\" + places.place_name + \"</h5>\";\n\n      if (places.road_address_name) {\n        itemStr += \"    <span>\" + places.road_address_name + \"</span>\" + '   <span class=\"jibun gray\">' + places.address_name + \"</span>\";\n      } else {\n        itemStr += \"    <span>\" + places.address_name + \"</span>\";\n      }\n\n      itemStr += '  <span class=\"tel\">' + places.phone + \"</span>\" + \"</div>\";\n      el.innerHTML = itemStr;\n      el.className = \"item\";\n      return el;\n    } // 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\n\n\n    function addMarker(position, idx, title) {\n      var imageSrc = \"https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png\",\n          // 마커 이미지 url, 스프라이트 이미지를 씁니다\n      imageSize = new kakao.maps.Size(36, 37),\n          // 마커 이미지의 크기\n      imgOptions = {\n        spriteSize: new kakao.maps.Size(36, 691),\n        // 스프라이트 이미지의 크기\n        spriteOrigin: new kakao.maps.Point(0, idx * 46 + 10),\n        // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\n        offset: new kakao.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표\n\n      },\n          markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),\n          marker = new kakao.maps.Marker({\n        position: position,\n        // 마커의 위치\n        image: markerImage\n      });\n      marker.setMap(map); // 지도 위에 마커를 표출합니다\n\n      markers.push(marker); // 배열에 생성된 마커를 추가합니다\n\n      return marker;\n    } // 지도 위에 표시되고 있는 마커를 모두 제거합니다\n\n\n    function removeMarker() {\n      for (var i = 0; i < markers.length; i++) {\n        markers[i].setMap(null);\n      }\n\n      markers = [];\n    } // 검색결과 목록 하단에 페이지번호를 표시는 함수입니다\n\n\n    function displayPagination(pagination) {\n      var paginationEl = document.getElementById(\"pagination\"),\n          fragment = document.createDocumentFragment(),\n          i; // 기존에 추가된 페이지번호를 삭제합니다\n\n      while (paginationEl.hasChildNodes()) {\n        paginationEl.removeChild(paginationEl.lastChild);\n      }\n\n      for (i = 1; i <= pagination.last; i++) {\n        var el = document.createElement(\"a\");\n        el.href = \"#\";\n        el.innerHTML = i;\n\n        if (i === pagination.current) {\n          el.className = \"on\";\n        } else {\n          el.onclick = function (i) {\n            return function () {\n              pagination.gotoPage(i);\n            };\n          }(i);\n        }\n\n        fragment.appendChild(el);\n      }\n\n      paginationEl.appendChild(fragment);\n    } // 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다\n    // 인포윈도우에 장소명을 표시합니다\n\n\n    function displayInfowindow(marker, title) {\n      var content = '<div style=\"padding:5px;z-index:1;\">' + title + \"</div>\";\n      infowindow.setContent(content);\n      infowindow.open(map, marker);\n    } // 검색결과 목록의 자식 Element를 제거하는 함수입니다\n\n\n    function removeAllChildNods(el) {\n      while (el.hasChildNodes()) {\n        el.removeChild(el.lastChild);\n      }\n    }\n  }, [place]);\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    id: \"map\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 311,\n    columnNumber: 10\n  }, this);\n};\n\n_s(KakaoMap, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c2 = KakaoMap;\nexport default KakaoMap;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MapContainer\");\n$RefreshReg$(_c2, \"KakaoMap\");","map":{"version":3,"sources":["D:/__Bitcamp/__crafts/02_final/project/where-we-go/front-end/src/components/body/map/KakaoMap.jsx"],"names":["React","useEffect","styled","MapContainer","div","kakao","window","KakaoMap","place","markers","mapContainer","document","getElementById","mapOption","center","maps","LatLng","level","map","Map","ps","services","Places","infowindow","InfoWindow","zIndex","searchPlaces","keyword","replace","alert","keywordSearch","placesSearchCB","data","status","pagination","Status","OK","displayPlaces","displayPagination","ZERO_RESULT","ERROR","places","listEl","menuEl","fragment","createDocumentFragment","bounds","LatLngBounds","listStr","removeAllChildNods","removeMarker","i","length","placePosition","y","x","marker","addMarker","itemEl","getListItem","extend","title","event","addListener","displayInfowindow","close","onmouseover","onmouseout","place_name","appendChild","scrollTop","setBounds","index","el","createElement","itemStr","road_address_name","address_name","phone","innerHTML","className","position","idx","imageSrc","imageSize","Size","imgOptions","spriteSize","spriteOrigin","Point","offset","markerImage","MarkerImage","Marker","image","setMap","push","paginationEl","hasChildNodes","removeChild","lastChild","last","href","current","onclick","gotoPage","content","setContent","open"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst MapContainer = styled.div`\r\n  width: 800px;\r\n  height: 400px;\r\n`;\r\n\r\nconst { kakao } = window;\r\nconst KakaoMap = ({ place = \"\" }) => {\r\n  useEffect(() => {\r\n    // const container = document.getElementById(\"map\");\r\n    // const options = {\r\n    //   // center: 지도의 중심\r\n    //   center: new kakao.maps.LatLng(37.365264512305174, 127.10676860117488),\r\n    //   // level: 확대/축소 정도\r\n    //   level: 3,\r\n    // };\r\n    // const map = new kakao.maps.Map(container, options);\r\n    // let markers = [];\r\n    // // 장소 검색기\r\n    // const places = new kakao.maps.services.Places();\r\n    // // 클릭시 표시될 인포윈도우\r\n    // const infoWindow = new kakao.maps.InfoWindow({ zIndex: 1 });\r\n\r\n    // // 검색이 완료되었을 때\r\n    // const completeSearching = (data, status, pagination) => {\r\n    //   if (status === kakao.maps.services.Status.OK) {\r\n    //     displayPlaces(data);\r\n    //     displayPagination(pagination);\r\n    //   } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\r\n    //     alert(\"검색결과가 없어용...\");\r\n    //     return;\r\n    //   } else if (status === kakao.maps.services.Status.ERROR) {\r\n    //     alert(\"오류가 생겼어용...\");\r\n    //     return;\r\n    //   }\r\n    // };\r\n\r\n    // // 키워드가 입력되어 검색이 실행되었을 떄\r\n    // const searchPlaces = () => {\r\n    //   if (!place.replace(/^\\s+|\\s+$/g, \"\")) {\r\n    //     alert(\"키워드 입력하시죠\");\r\n    //     return false;\r\n    //   }\r\n    //   places.keywordSearch(place, completeSearching);\r\n    // };\r\n    // searchPlaces();\r\n\r\n    // // 검색 결과 장소를 표시\r\n    // const displayPlaces = (data) => {\r\n    //   const list = document.getElementById(\"placesList\"),\r\n    //     menu = document.getElementById(\"menu-wrap\"),\r\n    //     fragment = document.createDocumentFragment(),\r\n    //     bounds = new kakao.maps.LatLngBounds(),\r\n    //     listStr = \"\";\r\n\r\n    //   removeAllChildNods(list);\r\n    //   removeMarker();\r\n\r\n    //   for (let i = 0; i < data.length; i++) {\r\n    //     const placePosition = new kakao.maps.LatLng(places[i].y, places[i].x),\r\n    //       marker = addMarker(placePosition, i),\r\n    //       item = getListItem(i, places[i]);\r\n    //     bounds.extend(placePosition);\r\n    //     (function (marker, title) {\r\n    //       kakao.maps.event.addListener(marker, \"mouseover\", function () {\r\n    //         displayInfowindow(marker, title);\r\n    //       });\r\n    //       kakao.maps.event.addListener(marker, \"mouseout\", function () {\r\n    //         infoWindow.close();\r\n    //       });\r\n    //       item.onmouseover = function () {\r\n    //         displayInfowindow(marker, title);\r\n    //       };\r\n    //       item.onmouseout = function () {\r\n    //         infoWindow.close();\r\n    //       };\r\n    //     })(marker, places[i].place_name);\r\n    //     fragment.appendChild(item);\r\n    //   }\r\n    //   list.appendChild(fragment);\r\n    //   menu.scrollTop = 0;\r\n    //   map.setBounds(bounds);\r\n    // };\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // 그대로 복붙\r\n    // 마커를 담을 배열입니다\r\n    var markers = [];\r\n\r\n    var mapContainer = document.getElementById(\"map\"), // 지도를 표시할 div\r\n      mapOption = {\r\n        center: new kakao.maps.LatLng(37.566826, 126.9786567), // 지도의 중심좌표\r\n        level: 3, // 지도의 확대 레벨\r\n      };\r\n\r\n    // 지도를 생성합니다\r\n    var map = new kakao.maps.Map(mapContainer, mapOption);\r\n\r\n    // 장소 검색 객체를 생성합니다\r\n    var ps = new kakao.maps.services.Places();\r\n\r\n    // 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다\r\n    var infowindow = new kakao.maps.InfoWindow({ zIndex: 1 });\r\n\r\n    // 키워드로 장소를 검색합니다\r\n    searchPlaces();\r\n\r\n    // 키워드 검색을 요청하는 함수입니다\r\n    function searchPlaces() {\r\n      var keyword = place;\r\n\r\n      if (!keyword.replace(/^\\s+|\\s+$/g, \"\")) {\r\n        alert(\"키워드를 입력해주세요!\");\r\n        return false;\r\n      }\r\n\r\n      // 장소검색 객체를 통해 키워드로 장소검색을 요청합니다\r\n      ps.keywordSearch(keyword, placesSearchCB);\r\n    }\r\n\r\n    // 장소검색이 완료됐을 때 호출되는 콜백함수 입니다\r\n    function placesSearchCB(data, status, pagination) {\r\n      if (status === kakao.maps.services.Status.OK) {\r\n        // 정상적으로 검색이 완료됐으면\r\n        // 검색 목록과 마커를 표출합니다\r\n        displayPlaces(data);\r\n\r\n        // 페이지 번호를 표출합니다\r\n        displayPagination(pagination);\r\n      } else if (status === kakao.maps.services.Status.ZERO_RESULT) {\r\n        alert(\"검색 결과가 존재하지 않습니다.\");\r\n        return;\r\n      } else if (status === kakao.maps.services.Status.ERROR) {\r\n        alert(\"검색 결과 중 오류가 발생했습니다.\");\r\n        return;\r\n      }\r\n    }\r\n\r\n    // 검색 결과 목록과 마커를 표출하는 함수입니다\r\n    function displayPlaces(places) {\r\n      var listEl = document.getElementById(\"placesList\"),\r\n        menuEl = document.getElementById(\"menu_wrap\"),\r\n        fragment = document.createDocumentFragment(),\r\n        bounds = new kakao.maps.LatLngBounds(),\r\n        listStr = \"\";\r\n\r\n      // 검색 결과 목록에 추가된 항목들을 제거합니다\r\n      removeAllChildNods(listEl);\r\n\r\n      // 지도에 표시되고 있는 마커를 제거합니다\r\n      removeMarker();\r\n\r\n      for (var i = 0; i < places.length; i++) {\r\n        // 마커를 생성하고 지도에 표시합니다\r\n        var placePosition = new kakao.maps.LatLng(places[i].y, places[i].x),\r\n          marker = addMarker(placePosition, i),\r\n          itemEl = getListItem(i, places[i]); // 검색 결과 항목 Element를 생성합니다\r\n\r\n        // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\r\n        // LatLngBounds 객체에 좌표를 추가합니다\r\n        bounds.extend(placePosition);\r\n\r\n        // 마커와 검색결과 항목에 mouseover 했을때\r\n        // 해당 장소에 인포윈도우에 장소명을 표시합니다\r\n        // mouseout 했을 때는 인포윈도우를 닫습니다\r\n        (function (marker, title) {\r\n          kakao.maps.event.addListener(marker, \"mouseover\", function () {\r\n            displayInfowindow(marker, title);\r\n          });\r\n\r\n          kakao.maps.event.addListener(marker, \"mouseout\", function () {\r\n            infowindow.close();\r\n          });\r\n\r\n          itemEl.onmouseover = function () {\r\n            displayInfowindow(marker, title);\r\n          };\r\n\r\n          itemEl.onmouseout = function () {\r\n            infowindow.close();\r\n          };\r\n        })(marker, places[i].place_name);\r\n\r\n        fragment.appendChild(itemEl);\r\n      }\r\n\r\n      // 검색결과 항목들을 검색결과 목록 Elemnet에 추가합니다\r\n      listEl.appendChild(fragment);\r\n      menuEl.scrollTop = 0;\r\n\r\n      // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\r\n      map.setBounds(bounds);\r\n    }\r\n\r\n    // 검색결과 항목을 Element로 반환하는 함수입니다\r\n    function getListItem(index, places) {\r\n      var el = document.createElement(\"li\"),\r\n        itemStr =\r\n          '<span class=\"markerbg marker_' +\r\n          (index + 1) +\r\n          '\"></span>' +\r\n          '<div class=\"info\">' +\r\n          \"   <h5>\" +\r\n          places.place_name +\r\n          \"</h5>\";\r\n\r\n      if (places.road_address_name) {\r\n        itemStr +=\r\n          \"    <span>\" +\r\n          places.road_address_name +\r\n          \"</span>\" +\r\n          '   <span class=\"jibun gray\">' +\r\n          places.address_name +\r\n          \"</span>\";\r\n      } else {\r\n        itemStr += \"    <span>\" + places.address_name + \"</span>\";\r\n      }\r\n\r\n      itemStr += '  <span class=\"tel\">' + places.phone + \"</span>\" + \"</div>\";\r\n\r\n      el.innerHTML = itemStr;\r\n      el.className = \"item\";\r\n\r\n      return el;\r\n    }\r\n\r\n    // 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다\r\n    function addMarker(position, idx, title) {\r\n      var imageSrc =\r\n          \"https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png\", // 마커 이미지 url, 스프라이트 이미지를 씁니다\r\n        imageSize = new kakao.maps.Size(36, 37), // 마커 이미지의 크기\r\n        imgOptions = {\r\n          spriteSize: new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기\r\n          spriteOrigin: new kakao.maps.Point(0, idx * 46 + 10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\r\n          offset: new kakao.maps.Point(13, 37), // 마커 좌표에 일치시킬 이미지 내에서의 좌표\r\n        },\r\n        markerImage = new kakao.maps.MarkerImage(\r\n          imageSrc,\r\n          imageSize,\r\n          imgOptions\r\n        ),\r\n        marker = new kakao.maps.Marker({\r\n          position: position, // 마커의 위치\r\n          image: markerImage,\r\n        });\r\n\r\n      marker.setMap(map); // 지도 위에 마커를 표출합니다\r\n      markers.push(marker); // 배열에 생성된 마커를 추가합니다\r\n\r\n      return marker;\r\n    }\r\n\r\n    // 지도 위에 표시되고 있는 마커를 모두 제거합니다\r\n    function removeMarker() {\r\n      for (var i = 0; i < markers.length; i++) {\r\n        markers[i].setMap(null);\r\n      }\r\n      markers = [];\r\n    }\r\n\r\n    // 검색결과 목록 하단에 페이지번호를 표시는 함수입니다\r\n    function displayPagination(pagination) {\r\n      var paginationEl = document.getElementById(\"pagination\"),\r\n        fragment = document.createDocumentFragment(),\r\n        i;\r\n\r\n      // 기존에 추가된 페이지번호를 삭제합니다\r\n      while (paginationEl.hasChildNodes()) {\r\n        paginationEl.removeChild(paginationEl.lastChild);\r\n      }\r\n\r\n      for (i = 1; i <= pagination.last; i++) {\r\n        var el = document.createElement(\"a\");\r\n        el.href = \"#\";\r\n        el.innerHTML = i;\r\n\r\n        if (i === pagination.current) {\r\n          el.className = \"on\";\r\n        } else {\r\n          el.onclick = (function (i) {\r\n            return function () {\r\n              pagination.gotoPage(i);\r\n            };\r\n          })(i);\r\n        }\r\n\r\n        fragment.appendChild(el);\r\n      }\r\n      paginationEl.appendChild(fragment);\r\n    }\r\n\r\n    // 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다\r\n    // 인포윈도우에 장소명을 표시합니다\r\n    function displayInfowindow(marker, title) {\r\n      var content = '<div style=\"padding:5px;z-index:1;\">' + title + \"</div>\";\r\n\r\n      infowindow.setContent(content);\r\n      infowindow.open(map, marker);\r\n    }\r\n\r\n    // 검색결과 목록의 자식 Element를 제거하는 함수입니다\r\n    function removeAllChildNods(el) {\r\n      while (el.hasChildNodes()) {\r\n        el.removeChild(el.lastChild);\r\n      }\r\n    }\r\n  }, [place]);\r\n\r\n  return <MapContainer id=\"map\"></MapContainer>;\r\n};\r\n\r\nexport default KakaoMap;\r\n"]},"metadata":{},"sourceType":"module"}