{"ast":null,"code":"var _jsxFileName = \"D:\\\\__Bitcamp\\\\__crafts\\\\02_final\\\\project\\\\1009~\\\\PlanD\\\\front-end\\\\src\\\\components\\\\body\\\\map\\\\CustomTMap.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TMapContainer = styled.div`\n  width: 800px;\n  height: 400px;\n`;\n_c = TMapContainer;\nconst {\n  Tmapv2\n} = window;\n\nconst CustomTMap = () => {\n  _s();\n\n  const [map, setMap] = useState(null);\n  const [marker_s, setMarker_s] = useState(null);\n  const [marker_e, setMarker_e] = useState(null);\n  useEffect(() => {\n    var resultdrawArr = [];\n    var drawInfoArr = []; // 초기 지도 실행\n\n    setMap(new Tmapv2.Map(\"map_div\", {\n      center: new Tmapv2.LatLng(37.566481622437934, 126.98502302169841),\n      width: \"800px\",\n      height: \"400px\",\n      zoom: 15\n    })); // 출발지 마커\n\n    setMarker_s(new Tmapv2.Marker({\n      position: new Tmapv2.LatLng(37.5668986, 126.97871544),\n      icon: \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_s.png\",\n      iconSize: new Tmapv2.Size(24, 38),\n      map: map\n    })); // 도착지 마커\n\n    setMarker_e(new Tmapv2.Marker({\n      position: new Tmapv2.LatLng(37.57081522, 127.00160213),\n      icon: \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_e.png\",\n      iconSize: new Tmapv2.Size(24, 38),\n      map: map\n    }));\n    axios.post(\"https://apis.openapi.sk.com/tmap/routes/pedestrian?version=1&format=json&callback=result\", {\n      params: {\n        appKey: \"l7xx1f2e7bf8d081449caa3ee9ffbeec5f41\",\n        startX: \"126.97871544\",\n        startY: \"37.56689860\",\n        endX: \"127.00160213\",\n        endY: \"37.57081522\",\n        reqCoordType: \"WGS84GEO\",\n        resCoordType: \"EPSG3857\",\n        startName: \"출발지\",\n        endName: \"도착지\"\n      },\n      success: function (response) {\n        var resultData = response.features; //기존 그려진 라인 & 마커가 있다면 초기화\n\n        if (resultdrawArr.length > 0) {\n          for (var i in resultdrawArr) {\n            resultdrawArr[i].setMap(null);\n          }\n\n          resultdrawArr = [];\n        }\n\n        drawInfoArr = [];\n\n        for (var i in resultData) {\n          //for문 [S]\n          var geometry = resultData[i].geometry;\n          var properties = resultData[i].properties;\n\n          if (geometry.type == \"LineString\") {\n            for (var j in geometry.coordinates) {\n              // 경로들의 결과값(구간)들을 포인트 객체로 변환\n              var latlng = new Tmapv2.Point(geometry.coordinates[j][0], geometry.coordinates[j][1]); // 포인트 객체를 받아 좌표값으로 변환\n\n              var convertPoint = new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(latlng); // 포인트객체의 정보로 좌표값 변환 객체로 저장\n\n              var convertChange = new Tmapv2.LatLng(convertPoint._lat, convertPoint._lng); // 배열에 담기\n\n              drawInfoArr.push(convertChange);\n            }\n          } else {\n            var markerImg = \"\";\n            var pType = \"\";\n            var size;\n\n            if (properties.pointType == \"S\") {\n              //출발지 마커\n              markerImg = \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_s.png\";\n              pType = \"S\";\n              size = new Tmapv2.Size(24, 38);\n            } else if (properties.pointType == \"E\") {\n              //도착지 마커\n              markerImg = \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_e.png\";\n              pType = \"E\";\n              size = new Tmapv2.Size(24, 38);\n            } else {\n              //각 포인트 마커\n              markerImg = \"http://topopen.tmap.co.kr/imgs/point.png\";\n              pType = \"P\";\n              size = new Tmapv2.Size(8, 8);\n            } // 경로들의 결과값들을 포인트 객체로 변환\n\n\n            var latlon = new Tmapv2.Point(geometry.coordinates[0], geometry.coordinates[1]); // 포인트 객체를 받아 좌표값으로 다시 변환\n\n            var convertPoint = new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(latlon);\n            var routeInfoObj = {\n              markerImage: markerImg,\n              lng: convertPoint._lng,\n              lat: convertPoint._lat,\n              pointType: pType\n            }; // Marker 추가\n\n            marker_p = new Tmapv2.Marker({\n              position: new Tmapv2.LatLng(routeInfoObj.lat, routeInfoObj.lng),\n              icon: routeInfoObj.markerImage,\n              iconSize: size,\n              map: map\n            });\n          }\n        } //for문 [E]\n\n\n        drawLine(drawInfoArr);\n      },\n      error: function (request, status, error) {\n        console.log(\"code:\" + request.status + \"\\n\" + \"message:\" + request.responseText + \"\\n\" + \"error:\" + error);\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map_wrap\",\n      className: \"map_wrap3\",\n      children: /*#__PURE__*/_jsxDEV(TMapContainer, {\n        id: \"map_div\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map_act_btn_wrap clear_box\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"result\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CustomTMap, \"0fl01Rr1BoI1AElJ1S2hbpNYFPA=\");\n\n_c2 = CustomTMap;\nexport default CustomTMap;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TMapContainer\");\n$RefreshReg$(_c2, \"CustomTMap\");","map":{"version":3,"sources":["D:/__Bitcamp/__crafts/02_final/project/1009~/PlanD/front-end/src/components/body/map/CustomTMap.jsx"],"names":["axios","React","useEffect","useState","styled","TMapContainer","div","Tmapv2","window","CustomTMap","map","setMap","marker_s","setMarker_s","marker_e","setMarker_e","resultdrawArr","drawInfoArr","Map","center","LatLng","width","height","zoom","Marker","position","icon","iconSize","Size","post","params","appKey","startX","startY","endX","endY","reqCoordType","resCoordType","startName","endName","success","response","resultData","features","length","i","geometry","properties","type","j","coordinates","latlng","Point","convertPoint","Projection","convertEPSG3857ToWGS84GEO","convertChange","_lat","_lng","push","markerImg","pType","size","pointType","latlon","routeInfoObj","markerImage","lng","lat","marker_p","drawLine","error","request","status","console","log","responseText"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TMapContainer = styled.div`\r\n  width: 800px;\r\n  height: 400px;\r\n`;\r\n\r\nconst { Tmapv2 } = window;\r\nconst CustomTMap = () => {\r\n  const [map, setMap] = useState(null);\r\n  const [marker_s, setMarker_s] = useState(null);\r\n  const [marker_e, setMarker_e] = useState(null);\r\n\r\n  useEffect(() => {\r\n    var resultdrawArr = [];\r\n    var drawInfoArr = [];\r\n    // 초기 지도 실행\r\n    setMap(\r\n      new Tmapv2.Map(\"map_div\", {\r\n        center: new Tmapv2.LatLng(37.566481622437934, 126.98502302169841),\r\n        width: \"800px\",\r\n        height: \"400px\",\r\n        zoom: 15,\r\n      })\r\n    );\r\n\r\n    // 출발지 마커\r\n    setMarker_s(\r\n      new Tmapv2.Marker({\r\n        position: new Tmapv2.LatLng(37.5668986, 126.97871544),\r\n        icon: \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_s.png\",\r\n        iconSize: new Tmapv2.Size(24, 38),\r\n        map: map,\r\n      })\r\n    );\r\n\r\n    // 도착지 마커\r\n    setMarker_e(\r\n      new Tmapv2.Marker({\r\n        position: new Tmapv2.LatLng(37.57081522, 127.00160213),\r\n        icon: \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_e.png\",\r\n        iconSize: new Tmapv2.Size(24, 38),\r\n        map: map,\r\n      })\r\n    );\r\n\r\n    axios.post(\r\n      \"https://apis.openapi.sk.com/tmap/routes/pedestrian?version=1&format=json&callback=result\",\r\n      {\r\n        params: {\r\n          appKey: \"l7xx1f2e7bf8d081449caa3ee9ffbeec5f41\",\r\n          startX: \"126.97871544\",\r\n          startY: \"37.56689860\",\r\n          endX: \"127.00160213\",\r\n          endY: \"37.57081522\",\r\n          reqCoordType: \"WGS84GEO\",\r\n          resCoordType: \"EPSG3857\",\r\n          startName: \"출발지\",\r\n          endName: \"도착지\",\r\n        },\r\n        success: function (response) {\r\n          var resultData = response.features;\r\n\r\n          //기존 그려진 라인 & 마커가 있다면 초기화\r\n          if (resultdrawArr.length > 0) {\r\n            for (var i in resultdrawArr) {\r\n              resultdrawArr[i].setMap(null);\r\n            }\r\n            resultdrawArr = [];\r\n          }\r\n\r\n          drawInfoArr = [];\r\n\r\n          for (var i in resultData) {\r\n            //for문 [S]\r\n            var geometry = resultData[i].geometry;\r\n            var properties = resultData[i].properties;\r\n\r\n            if (geometry.type == \"LineString\") {\r\n              for (var j in geometry.coordinates) {\r\n                // 경로들의 결과값(구간)들을 포인트 객체로 변환\r\n                var latlng = new Tmapv2.Point(\r\n                  geometry.coordinates[j][0],\r\n                  geometry.coordinates[j][1]\r\n                );\r\n                // 포인트 객체를 받아 좌표값으로 변환\r\n                var convertPoint =\r\n                  new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(latlng);\r\n                // 포인트객체의 정보로 좌표값 변환 객체로 저장\r\n                var convertChange = new Tmapv2.LatLng(\r\n                  convertPoint._lat,\r\n                  convertPoint._lng\r\n                );\r\n                // 배열에 담기\r\n                drawInfoArr.push(convertChange);\r\n              }\r\n            } else {\r\n              var markerImg = \"\";\r\n              var pType = \"\";\r\n              var size;\r\n\r\n              if (properties.pointType == \"S\") {\r\n                //출발지 마커\r\n                markerImg =\r\n                  \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_s.png\";\r\n                pType = \"S\";\r\n                size = new Tmapv2.Size(24, 38);\r\n              } else if (properties.pointType == \"E\") {\r\n                //도착지 마커\r\n                markerImg =\r\n                  \"http://tmapapi.sktelecom.com/upload/tmap/marker/pin_r_m_e.png\";\r\n                pType = \"E\";\r\n                size = new Tmapv2.Size(24, 38);\r\n              } else {\r\n                //각 포인트 마커\r\n                markerImg = \"http://topopen.tmap.co.kr/imgs/point.png\";\r\n                pType = \"P\";\r\n                size = new Tmapv2.Size(8, 8);\r\n              }\r\n\r\n              // 경로들의 결과값들을 포인트 객체로 변환\r\n              var latlon = new Tmapv2.Point(\r\n                geometry.coordinates[0],\r\n                geometry.coordinates[1]\r\n              );\r\n\r\n              // 포인트 객체를 받아 좌표값으로 다시 변환\r\n              var convertPoint =\r\n                new Tmapv2.Projection.convertEPSG3857ToWGS84GEO(latlon);\r\n\r\n              var routeInfoObj = {\r\n                markerImage: markerImg,\r\n                lng: convertPoint._lng,\r\n                lat: convertPoint._lat,\r\n                pointType: pType,\r\n              };\r\n\r\n              // Marker 추가\r\n              marker_p = new Tmapv2.Marker({\r\n                position: new Tmapv2.LatLng(routeInfoObj.lat, routeInfoObj.lng),\r\n                icon: routeInfoObj.markerImage,\r\n                iconSize: size,\r\n                map: map,\r\n              });\r\n            }\r\n          } //for문 [E]\r\n          drawLine(drawInfoArr);\r\n        },\r\n        error: function (request, status, error) {\r\n          console.log(\r\n            \"code:\" +\r\n              request.status +\r\n              \"\\n\" +\r\n              \"message:\" +\r\n              request.responseText +\r\n              \"\\n\" +\r\n              \"error:\" +\r\n              error\r\n          );\r\n        },\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div id=\"map_wrap\" className=\"map_wrap3\">\r\n        <TMapContainer id=\"map_div\"></TMapContainer>\r\n      </div>\r\n      <div className=\"map_act_btn_wrap clear_box\"></div>\r\n      <p id=\"result\"></p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CustomTMap;\r\n"]},"metadata":{},"sourceType":"module"}